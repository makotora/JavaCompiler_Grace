# Οδήγίες - Hints

## Compile the compiler
   Στον κατάλογο grace
   make ή mvn clean package (το make κανει mvn clean package)

## Run the compiler - Κατάλογος run
	Χρησιμοποιούμε την εντολή 'gcc -o -m32 ...' όπως προτάθηκε στο φροντιστήριο για την assembly.

	Στον κατάλογο run υπάρχουν 2 βοηθητικά scripts για εύκολο compile και testing.
	Για να τα τρέξετε κάντε cd εκεί πρώτα (χρησιμοποιούν relative path για να τρέξουν την Main)

	./grace.sh : Για compile ενός αρχείου + παραγωγή εκτελέσιμου
	+ φάκελος με 3 αρχεία (τετράδες assembly και αντιστοιχία τετράδων σε assembly)

	./directory_test.sh : Compile και run όλων των αρχείων σε ένα directory (χρήση του grace.sh)

	## Script usage + details

		ΜΕ βελτιστοποίηση: ./grace.sh executable_name path/to/grace/file

		ΧΩΡΙΣ βελτιστοποίηση: το ίδιο με ένα extra argument στο τέλος (ότι να ναι)
		πχ. ./grace.sh executable_name path/to/grace/file whatever_you_want

		Το εκτελέσιμο θα βρίσκεται στον τρέχων κατάλογο και θα έχει το όνομα που δώσετε : executable_name (αν δωθεί path θα σωθεί στο path)
		Στον φάκελο 'file' θα υπάρχουν 3 αρχεία (τετράδες, assembly, αντιστοιχία)


		Φτιάξαμε και το script 'directory_test.sh,''
		που μπορεί επίσης να χρησιμοποιηθεί για την δική σας διευκόλυνση.
		Αυτό παίρνει ως πρώτο όρισμα ένα directory (path ή name)
		Παράδειγμα εκτέλεσης: directory_test.sh examples/eclass_examples

		ΓΙΑ ΚΑΘΕ αρχείο μέσα στο directory (καλύτερα να περιέχει μόνο προγράμματα grace αν και λογικά θα πετάξει απλά compilation error γι τα υπόλοιπα)
		(1)το κάνει compile με το πιο πάνω script ./grace.sh (ΜΕ βελτιστοποιηση) και βγάζει την έξοδο του compilation
		(2)ΈΦΟΣΟΝ πετύχει το compilation (ελέγχει return value) τρέχει το εκτελέσιμο, δέχεται την είσοδο αν χρειάζεται και βγάζει την έξοδο στο stdout.
		Οπότε ΓΙΑ ΚΑΘΕ αρχείο για το οποίο θα πετύχει το compilation
		μέσα στον φάκελο run Θα έχει παραχθεί ο σχετικός φάκελος με τα 3 αρχεία.

		Γενικά έχουμε δοκιμάσει τα πάντα και με και χωρις βελτιστοποίηση και φαίνεται να τρέχουν.
		Αν κάτι όμως δεν φαίνεται να δουλέυει σωστα, δοκιμάστε compile χωρίς βελτιστοποίηση μήπως φταίει
		κάποιο bug εκεί! :)

		Λεπτομέρειες για το grace script - compiler:

		Αν μεταγλωττίζουμε το αρχείο file.grace
		Ο compiler στην java παράγει 3 αρχεία:
		file.quads : οι τετράδες που παράχτηκαν
		file.s     : η assembly που παράχτηκε
		file.qs    : για κάθε τετράδα που παράχτηκε, ο assembly κώδικας στον οποίο μετατρέπεται

		Το grace.sh:
		(1) Τρέχει τον compiler για το αρχείο που ζητείται (path/to/grace/file)
		(2) Φτιάχνει στον τρέχων κατάλογο ένα directory με όνομα 'file' και βάζει εκεί μέσα (κάνει mv γιατί αρχικά δημιουργούνται όπου ήταν και το .grace αρχείο)
		(3) Κάνει compile με 'gcc -o -m32 executable_name file/file.s' το αρχείο της assembly 
		(που τώρα θα βρίσκεται στον κατάλογο file)


		H Main class της java προφανώς μπορεί και αυτή να κάνει compile αρχεία (Αυτή καλείται απ τα scripts)
		Αρκεί να βρίσκεστε στον κατάλογο target/classes και να τρέξετε 'java compiler.Main path/to/grace/file arg2'
		όπου το arg2 είναι προαιρετικό, και αν δωθεί (ότι και να ναι) σημαίνει compile ΧΩΡΙΣ βελτιστοποίηση

##Examples
	Τα παραδείγματα του eclass και δικά μας παραδείγματα υπάρχουν στον κατάλογο grace/examples
	grace/examples/assemblyTests: ορισμένα καλά παραδείγματα για εκτέλεση δικά μας.
	Το printTests.grace είναι πολύ καλό και έχει διάφορα (nested functions, πέρασμα πίνακα σε συναρτηση etc) 

	grace/examples/optimization: Κάποια παραδείγματα που δοκιμάζαμε για να δούμε ότι δουλέυει η βελτιστοποίηση
	Καλό είναι το blocks.grace

## Quadruples
	Ακολουθήσαμε τις διαφάνειες.Δεν κάναμε κάτι δικό μας.


## Τα κάναμε όλα

Έχουμε κάνει τελικό κώδικα σε assembly και κάναμε και τις συναρτήσεις βιβλιοθήκης!
Αυτές γράφονται στο τέλος του τελικού assembly αρχείου.
Τρέχουν όλα τα παραδείγματα στο eclass καθώς και ορισμένα 'περίεργα' δικά μας

## BONUS

Επίσης έχουμε κάνει το BONUS! (βελτιστοποίηση!).
Διάφορα παραδείγματα που δοκιμάσαμε είναι στον κατάλογο examples/optimization
Συγκεκριμένα κάναμε τα εξής:

- Φτιάξαμε τον flow control graph (Basic blocks και ακμές)
- Κάναμε το constant folding
- Κάναμε το copy propagation
- Subexpressions
- Κάνουμε την φόρτωση πίνακα με την εντολή 
			"lea edx, [41*eax+ecx]"		ή	"lea edx, [eax+ecx]"
- Σβήνουμε τις αναθέσεις των μεταβλητών που δεν χρησιμοποιούνται σε μια συνάρτηση
	Αν οι μεταβλητές δεν είναι τοπικές στην συνάρτηση δεν τις σβήνουμε
	Αν μεσολαβεί κάποιο call και παλι δεν τις σβήνουμε
	Αν ακολουθήσει κάποια ανάθεση στην ιδια μεταβλητή πριν κάποια χρήση την σβήνουμε
	Και άλλες περιπτώσεις..

- Σβήνουμε τα περιττά jumps ,συμπυκνώνουμε τα jumps (πχ αν ενα Jump πηδάει σε άλλο Jump)
- Σβήνουμε τις αναθέσεις σε προσωρινές μεταβλητές που δεν χρησιμοποιουνται
- Σβήνουμε τα unreachable blocks


- Σημαντικο, με την βελτιστοποίηση 'σβήνονται' κάποιες φορές τετράδες.
	Αντί για σβήσιμο τις αντικαθιστούμε με δικές μας τετράδες 'noop'
	Η κλάση που μετατρέπει assembly απο τετράδες, δεν παράγει κώδικα για την τετράδα αυτή.
	Αλλά γράφει το label της στο assembly αρχείο.(Label μόνο του χωρίς κώδικα)
	Αυτό γίνεται μήπως και κάποιο jmp οδηγεί σε αυτό το label