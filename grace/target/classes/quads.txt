main nothing i int j int ret int x int 2 10 chr char string char 10 foo x int [ 10 int boo nothing array int 2 10 puts "In boo function with i: " puti i putc '\n' i 20 puti x i 10 i 10 putc ' ' x i 10 i 10 x i 10 i 10 1 puti x i 10 i 10 putc '\n' putc '\n' i i 1 j 100 ret foo x puts "Here\n" puts "In foo function with i: " puti i putc '\n' puts "In foo function with j: " puti j putc '\n' i 0 i i 1 puti i 10 putc ' ' puti i 10 putc ' ' puti x i 10 i 10 putc '\n' putc '\n' chr 'z' putc '\n' j 100 puts "Calling boo with i: " puti i putc '\n' boo i puts "1 + 24 = " puti 1 24 putc '\n' puts "51 - 100 = " puti 51 100 putc '\n' puts "5 * 12 = " puti 5 12 putc '\n' puts "10 div 3 = " puti 10 3 putc '\n' puts "5 * 6 = " puti 5 6 putc '\n' putc '\n' putc '\n' i 0 i 20 puti i 10 putc ' ' puti i 10 putc ' ' x i 10 i 10 i puti x i 10 i 10 putc '\n' putc '\n' i i 1 chr 'a' putc chr putc '\n' puts "Calling foo with i: " puti i putc '\n' j 0 ret foo x puts "Foo returned : " puti ret putc '\n' puts "i is : " puti i putc '\n' putc chr putc '\n' putc '\n'  
1: unit,boo_3,-,-
boo_3:
	push ebp
	mov ebp, esp
	sub esp, 172

2: par,"In boo function with i: ",R,-
	mov esi, OFFSET FLAT:STR1
	push esi

3: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

4: par,i,V,-
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	push eax

5: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

6: par,'\n',V,-
	mov eax, '\n'
	push eax

7: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

8: <,i,20,10
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	mov edx, 20
	cmp eax, edx
	jl L10

9: jump,-,-,45
	jmp L45

10: div,i,10,$1
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 84], eax

11: mod,i,10,$2
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 88], edx

12: *,$1,10,$3
	mov eax, DWORD PTR [ebp - 84]
	mov ecx, 10
	imul ecx
	mov DWORD PTR [ebp - 92], eax

13: +,$2,$3,$4
	mov eax, DWORD PTR [ebp - 88]
	mov edx, DWORD PTR [ebp - 92]
	add eax, edx
	mov DWORD PTR [ebp - 96], eax

14: array,x,$4,$5
	mov eax, DWORD PTR [ebp - 96]
	mov ecx, 4
	imul ecx
	mov esi, DWORD PTR [ebp + 8]
	mov ecx, DWORD PTR [esi + 16]
	add eax, ecx
	mov DWORD PTR [ebp - 100], eax

15: par,[$5],V,-
	mov edi, DWORD PTR [ebp - 100]
	mov eax, DWORD PTR [edi]
	push eax

16: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

17: par,' ',V,-
	mov eax, ' '
	push eax

18: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

19: div,i,10,$6
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 104], eax

20: mod,i,10,$7
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 108], edx

21: *,$6,10,$8
	mov eax, DWORD PTR [ebp - 104]
	mov ecx, 10
	imul ecx
	mov DWORD PTR [ebp - 112], eax

22: +,$7,$8,$9
	mov eax, DWORD PTR [ebp - 108]
	mov edx, DWORD PTR [ebp - 112]
	add eax, edx
	mov DWORD PTR [ebp - 116], eax

23: array,x,$9,$10
	mov eax, DWORD PTR [ebp - 116]
	mov ecx, 4
	imul ecx
	mov esi, DWORD PTR [ebp + 8]
	mov ecx, DWORD PTR [esi + 16]
	add eax, ecx
	mov DWORD PTR [ebp - 120], eax

24: div,i,10,$11
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 124], eax

25: mod,i,10,$12
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 128], edx

26: *,$11,10,$13
	mov eax, DWORD PTR [ebp - 124]
	mov ecx, 10
	imul ecx
	mov DWORD PTR [ebp - 132], eax

27: +,$12,$13,$14
	mov eax, DWORD PTR [ebp - 128]
	mov edx, DWORD PTR [ebp - 132]
	add eax, edx
	mov DWORD PTR [ebp - 136], eax

28: array,x,$14,$15
	mov eax, DWORD PTR [ebp - 136]
	mov ecx, 4
	imul ecx
	mov esi, DWORD PTR [ebp + 8]
	mov ecx, DWORD PTR [esi + 16]
	add eax, ecx
	mov DWORD PTR [ebp - 140], eax

29: +,[$15],1,$16
	mov edi, DWORD PTR [ebp - 140]
	mov eax, DWORD PTR [edi]
	mov edx, 1
	add eax, edx
	mov DWORD PTR [ebp - 144], eax

30: :=,$16,-,[$10]
	mov eax, DWORD PTR [ebp - 144]
	mov edi, DWORD PTR [ebp - 120]
	mov DWORD PTR [edi], eax

31: div,i,10,$17
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 148], eax

32: mod,i,10,$18
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 152], edx

33: *,$17,10,$19
	mov eax, DWORD PTR [ebp - 148]
	mov ecx, 10
	imul ecx
	mov DWORD PTR [ebp - 156], eax

34: +,$18,$19,$20
	mov eax, DWORD PTR [ebp - 152]
	mov edx, DWORD PTR [ebp - 156]
	add eax, edx
	mov DWORD PTR [ebp - 160], eax

35: array,x,$20,$21
	mov eax, DWORD PTR [ebp - 160]
	mov ecx, 4
	imul ecx
	mov esi, DWORD PTR [ebp + 8]
	mov ecx, DWORD PTR [esi + 16]
	add eax, ecx
	mov DWORD PTR [ebp - 164], eax

36: par,[$21],V,-
	mov edi, DWORD PTR [ebp - 164]
	mov eax, DWORD PTR [edi]
	push eax

37: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

38: par,'\n',V,-
	mov eax, '\n'
	push eax

39: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

40: par,'\n',V,-
	mov eax, '\n'
	push eax

41: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

42: +,i,1,$22
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov eax, DWORD PTR [esi - 4]
	mov edx, 1
	add eax, edx
	mov DWORD PTR [ebp - 168], eax

43: :=,$22,-,i
	mov eax, DWORD PTR [ebp - 168]
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov DWORD PTR [esi - 4], eax

44: jump,-,-,8
	jmp L8

45: :=,100,-,j
	mov eax, 100
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov DWORD PTR [esi - 8], eax

46: par,x,R,-
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 16]
	push esi

47: par,$23,RET,-
	lea esi, DWORD PTR [ebp - 172]
	push esi

48: call,-,-,foo_2
	mov esi, DWORD PTR [ebp + 8]
	push DWORD PTR [esi + 8]
	call foo_2
	add esp, 12

49: :=,$23,-,ret
	mov eax, DWORD PTR [ebp - 172]
	mov esi, DWORD PTR [ebp + 8]
	mov esi, DWORD PTR [esi + 8]
	mov DWORD PTR [esi - 12], eax

50: par,"Here\n",R,-
	mov esi, OFFSET FLAT:STR2
	push esi

51: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

52: endu,boo_3,-,-
boo_3_end:
	mov esp, ebp
	pop ebp
	ret

53: unit,foo_2,-,-
foo_2:
	push ebp
	mov ebp, esp
	sub esp, 32

54: par,"In foo function with i: ",R,-
	mov esi, OFFSET FLAT:STR3
	push esi

55: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

56: par,i,V,-
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	push eax

57: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

58: par,'\n',V,-
	mov eax, '\n'
	push eax

59: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

60: par,"In foo function with j: ",R,-
	mov esi, OFFSET FLAT:STR4
	push esi

61: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

62: par,j,V,-
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 8]
	push eax

63: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

64: par,'\n',V,-
	mov eax, '\n'
	push eax

65: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

66: >,i,0,68
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	mov edx, 0
	cmp eax, edx
	jg L68

67: jump,-,-,93
	jmp L93

68: -,i,1,$24
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	mov edx, 1
	sub eax, edx
	mov DWORD PTR [ebp - 4], eax

69: :=,$24,-,i
	mov eax, DWORD PTR [ebp - 4]
	mov esi, DWORD PTR [ebp + 8]
	mov DWORD PTR [esi - 4], eax

70: div,i,10,$25
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 8], eax

71: par,$25,V,-
	mov eax, DWORD PTR [ebp - 8]
	push eax

72: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

73: par,' ',V,-
	mov eax, ' '
	push eax

74: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

75: mod,i,10,$26
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 12], edx

76: par,$26,V,-
	mov eax, DWORD PTR [ebp - 12]
	push eax

77: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

78: par,' ',V,-
	mov eax, ' '
	push eax

79: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

80: div,i,10,$27
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 16], eax

81: mod,i,10,$28
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 20], edx

82: *,$27,10,$29
	mov eax, DWORD PTR [ebp - 16]
	mov ecx, 10
	imul ecx
	mov DWORD PTR [ebp - 24], eax

83: +,$28,$29,$30
	mov eax, DWORD PTR [ebp - 20]
	mov edx, DWORD PTR [ebp - 24]
	add eax, edx
	mov DWORD PTR [ebp - 28], eax

84: array,x,$30,$31
	mov eax, DWORD PTR [ebp - 28]
	mov ecx, 4
	imul ecx
	mov ecx, DWORD PTR [ebp + 16]
	add eax, ecx
	mov DWORD PTR [ebp - 32], eax

85: par,[$31],V,-
	mov edi, DWORD PTR [ebp - 32]
	mov eax, DWORD PTR [edi]
	push eax

86: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

87: par,'\n',V,-
	mov eax, '\n'
	push eax

88: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

89: par,'\n',V,-
	mov eax, '\n'
	push eax

90: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

91: :=,'z',-,chr
	mov eax, 'z'
	mov esi, DWORD PTR [ebp + 8]
	mov BYTE PTR [esi - 93], eax

92: jump,-,-,66
	jmp L66

93: par,'\n',V,-
	mov eax, '\n'
	push eax

94: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

95: #,j,100,97
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 8]
	mov edx, 100
	cmp eax, edx
	jne L97

96: jump,-,-,104
	jmp L104

97: par,"Calling boo with i: ",R,-
	mov esi, OFFSET FLAT:STR5
	push esi

98: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

99: par,i,V,-
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	push eax

100: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

101: par,'\n',V,-
	mov eax, '\n'
	push eax

102: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

103: call,-,-,boo_3
	sub esp, 4
	push ebp
	call boo_3
	add esp, 8

104: :=,i,-,$$
	mov esi, DWORD PTR [ebp + 8]
	mov eax, DWORD PTR [esi - 4]
	mov esi, DWORD PTR [ebp + 12]
	mov DWORD PTR [esi], eax

105: ret,-,-,-
	jmp foo_2_end

106: endu,foo_2,-,-
foo_2_end:
	mov esp, ebp
	pop ebp
	ret

107: unit,main_1,-,-
main:
	push ebp
	mov ebp, esp
	sub esp, 179

108: par,"1 + 24 = ",R,-
	mov esi, OFFSET FLAT:STR6
	push esi

109: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

110: +,1,24,$32
	mov eax, 1
	mov edx, 24
	add eax, edx
	mov DWORD PTR [ebp - 107], eax

111: par,$32,V,-
	mov eax, DWORD PTR [ebp - 107]
	push eax

112: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

113: par,'\n',V,-
	mov eax, '\n'
	push eax

114: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

115: par,"51 - 100 = ",R,-
	mov esi, OFFSET FLAT:STR7
	push esi

116: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

117: -,51,100,$33
	mov eax, 51
	mov edx, 100
	sub eax, edx
	mov DWORD PTR [ebp - 111], eax

118: par,$33,V,-
	mov eax, DWORD PTR [ebp - 111]
	push eax

119: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

120: par,'\n',V,-
	mov eax, '\n'
	push eax

121: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

122: par,"5 * 12 = ",R,-
	mov esi, OFFSET FLAT:STR8
	push esi

123: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

124: *,5,12,$34
	mov eax, 5
	mov ecx, 12
	imul ecx
	mov DWORD PTR [ebp - 115], eax

125: par,$34,V,-
	mov eax, DWORD PTR [ebp - 115]
	push eax

126: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

127: par,'\n',V,-
	mov eax, '\n'
	push eax

128: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

129: par,"10 div 3 = ",R,-
	mov esi, OFFSET FLAT:STR9
	push esi

130: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

131: div,10,3,$35
	mov eax, 10
	cdq
	mov ebx, 3
	idiv ebx
	mov DWORD PTR [ebp - 119], eax

132: par,$35,V,-
	mov eax, DWORD PTR [ebp - 119]
	push eax

133: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

134: par,'\n',V,-
	mov eax, '\n'
	push eax

135: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

136: par,"5 * 6 = ",R,-
	mov esi, OFFSET FLAT:STR10
	push esi

137: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

138: *,5,6,$36
	mov eax, 5
	mov ecx, 6
	imul ecx
	mov DWORD PTR [ebp - 123], eax

139: par,$36,V,-
	mov eax, DWORD PTR [ebp - 123]
	push eax

140: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

141: par,'\n',V,-
	mov eax, '\n'
	push eax

142: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

143: par,'\n',V,-
	mov eax, '\n'
	push eax

144: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

145: par,'\n',V,-
	mov eax, '\n'
	push eax

146: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

147: :=,0,-,i
	mov eax, 0
	mov DWORD PTR [ebp - 4], eax

148: <,i,20,150
	mov eax, DWORD PTR [ebp - 4]
	mov edx, 20
	cmp eax, edx
	jl L150

149: jump,-,-,180
	jmp L180

150: div,i,10,$37
	mov eax, DWORD PTR [ebp - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 127], eax

151: par,$37,V,-
	mov eax, DWORD PTR [ebp - 127]
	push eax

152: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

153: par,' ',V,-
	mov eax, ' '
	push eax

154: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

155: mod,i,10,$38
	mov eax, DWORD PTR [ebp - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 131], edx

156: par,$38,V,-
	mov eax, DWORD PTR [ebp - 131]
	push eax

157: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

158: par,' ',V,-
	mov eax, ' '
	push eax

159: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

160: div,i,10,$39
	mov eax, DWORD PTR [ebp - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 135], eax

161: mod,i,10,$40
	mov eax, DWORD PTR [ebp - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 139], edx

162: *,$39,10,$41
	mov eax, DWORD PTR [ebp - 135]
	mov ecx, 10
	imul ecx
	mov DWORD PTR [ebp - 143], eax

163: +,$40,$41,$42
	mov eax, DWORD PTR [ebp - 139]
	mov edx, DWORD PTR [ebp - 143]
	add eax, edx
	mov DWORD PTR [ebp - 147], eax

164: array,x,$42,$43
	mov eax, DWORD PTR [ebp - 147]
	mov ecx, 4
	imul ecx
	lea ecx, DWORD PTR [ebp - 92]
	add eax, ecx
	mov DWORD PTR [ebp - 151], eax

165: :=,i,-,[$43]
	mov eax, DWORD PTR [ebp - 4]
	mov edi, DWORD PTR [ebp - 151]
	mov DWORD PTR [edi], eax

166: div,i,10,$44
	mov eax, DWORD PTR [ebp - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 155], eax

167: mod,i,10,$45
	mov eax, DWORD PTR [ebp - 4]
	cdq
	mov ebx, 10
	idiv ebx
	mov DWORD PTR [ebp - 159], edx

168: *,$44,10,$46
	mov eax, DWORD PTR [ebp - 155]
	mov ecx, 10
	imul ecx
	mov DWORD PTR [ebp - 163], eax

169: +,$45,$46,$47
	mov eax, DWORD PTR [ebp - 159]
	mov edx, DWORD PTR [ebp - 163]
	add eax, edx
	mov DWORD PTR [ebp - 167], eax

170: array,x,$47,$48
	mov eax, DWORD PTR [ebp - 167]
	mov ecx, 4
	imul ecx
	lea ecx, DWORD PTR [ebp - 92]
	add eax, ecx
	mov DWORD PTR [ebp - 171], eax

171: par,[$48],V,-
	mov edi, DWORD PTR [ebp - 171]
	mov eax, DWORD PTR [edi]
	push eax

172: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

173: par,'\n',V,-
	mov eax, '\n'
	push eax

174: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

175: par,'\n',V,-
	mov eax, '\n'
	push eax

176: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

177: +,i,1,$49
	mov eax, DWORD PTR [ebp - 4]
	mov edx, 1
	add eax, edx
	mov DWORD PTR [ebp - 175], eax

178: :=,$49,-,i
	mov eax, DWORD PTR [ebp - 175]
	mov DWORD PTR [ebp - 4], eax

179: jump,-,-,148
	jmp L148

180: :=,'a',-,chr
	mov eax, 'a'
	mov BYTE PTR [ebp - 93], eax

181: par,chr,V,-
	mov eax, BYTE PTR [ebp - 93]
	push eax

182: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

183: par,'\n',V,-
	mov eax, '\n'
	push eax

184: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

185: par,"Calling foo with i: ",R,-
	mov esi, OFFSET FLAT:STR11
	push esi

186: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

187: par,i,V,-
	mov eax, DWORD PTR [ebp - 4]
	push eax

188: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

189: par,'\n',V,-
	mov eax, '\n'
	push eax

190: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

191: :=,0,-,j
	mov eax, 0
	mov DWORD PTR [ebp - 8], eax

192: par,x,R,-
	lea esi, DWORD PTR [ebp - 92]
	push esi

193: par,$50,RET,-
	lea esi, DWORD PTR [ebp - 179]
	push esi

194: call,-,-,foo_2
	push ebp
	call foo_2
	add esp, 12

195: :=,$50,-,ret
	mov eax, DWORD PTR [ebp - 179]
	mov DWORD PTR [ebp - 12], eax

196: par,"Foo returned : ",R,-
	mov esi, OFFSET FLAT:STR12
	push esi

197: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

198: par,ret,V,-
	mov eax, DWORD PTR [ebp - 12]
	push eax

199: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

200: par,'\n',V,-
	mov eax, '\n'
	push eax

201: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

202: par,"i is : ",R,-
	mov esi, OFFSET FLAT:STR13
	push esi

203: call,-,-,puts_1
	sub esp, 4
	push 0
	call puts_1
	add esp, 12

204: par,i,V,-
	mov eax, DWORD PTR [ebp - 4]
	push eax

205: call,-,-,puti_1
	sub esp, 4
	push 0
	call puti_1
	add esp, 12

206: par,'\n',V,-
	mov eax, '\n'
	push eax

207: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

208: par,chr,V,-
	mov eax, BYTE PTR [ebp - 93]
	push eax

209: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

210: par,'\n',V,-
	mov eax, '\n'
	push eax

211: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

212: par,'\n',V,-
	mov eax, '\n'
	push eax

213: call,-,-,putc_1
	sub esp, 4
	push 0
	call putc_1
	add esp, 12

214: endu,main_1,-,-
main_1_end:
	mov esp, ebp
	pop ebp
	ret


------Printing Quadruples------
1: unit,boo_3,-,-
2: par,"In boo function with i: ",R,-
3: call,-,-,puts_1
4: par,i,V,-
5: call,-,-,puti_1
6: par,'\n',V,-
7: call,-,-,putc_1
8: <,i,20,10
9: jump,-,-,45
10: div,i,10,$1
11: mod,i,10,$2
12: *,$1,10,$3
13: +,$2,$3,$4
14: array,x,$4,$5
15: par,[$5],V,-
16: call,-,-,puti_1
17: par,' ',V,-
18: call,-,-,putc_1
19: div,i,10,$6
20: mod,i,10,$7
21: *,$6,10,$8
22: +,$7,$8,$9
23: array,x,$9,$10
24: div,i,10,$11
25: mod,i,10,$12
26: *,$11,10,$13
27: +,$12,$13,$14
28: array,x,$14,$15
29: +,[$15],1,$16
30: :=,$16,-,[$10]
31: div,i,10,$17
32: mod,i,10,$18
33: *,$17,10,$19
34: +,$18,$19,$20
35: array,x,$20,$21
36: par,[$21],V,-
37: call,-,-,puti_1
38: par,'\n',V,-
39: call,-,-,putc_1
40: par,'\n',V,-
41: call,-,-,putc_1
42: +,i,1,$22
43: :=,$22,-,i
44: jump,-,-,8
45: :=,100,-,j
46: par,x,R,-
47: par,$23,RET,-
48: call,-,-,foo_2
49: :=,$23,-,ret
50: par,"Here\n",R,-
51: call,-,-,puts_1
52: endu,boo_3,-,-
53: unit,foo_2,-,-
54: par,"In foo function with i: ",R,-
55: call,-,-,puts_1
56: par,i,V,-
57: call,-,-,puti_1
58: par,'\n',V,-
59: call,-,-,putc_1
60: par,"In foo function with j: ",R,-
61: call,-,-,puts_1
62: par,j,V,-
63: call,-,-,puti_1
64: par,'\n',V,-
65: call,-,-,putc_1
66: >,i,0,68
67: jump,-,-,93
68: -,i,1,$24
69: :=,$24,-,i
70: div,i,10,$25
71: par,$25,V,-
72: call,-,-,puti_1
73: par,' ',V,-
74: call,-,-,putc_1
75: mod,i,10,$26
76: par,$26,V,-
77: call,-,-,puti_1
78: par,' ',V,-
79: call,-,-,putc_1
80: div,i,10,$27
81: mod,i,10,$28
82: *,$27,10,$29
83: +,$28,$29,$30
84: array,x,$30,$31
85: par,[$31],V,-
86: call,-,-,puti_1
87: par,'\n',V,-
88: call,-,-,putc_1
89: par,'\n',V,-
90: call,-,-,putc_1
91: :=,'z',-,chr
92: jump,-,-,66
93: par,'\n',V,-
94: call,-,-,putc_1
95: #,j,100,97
96: jump,-,-,104
97: par,"Calling boo with i: ",R,-
98: call,-,-,puts_1
99: par,i,V,-
100: call,-,-,puti_1
101: par,'\n',V,-
102: call,-,-,putc_1
103: call,-,-,boo_3
104: :=,i,-,$$
105: ret,-,-,-
106: endu,foo_2,-,-
107: unit,main_1,-,-
108: par,"1 + 24 = ",R,-
109: call,-,-,puts_1
110: +,1,24,$32
111: par,$32,V,-
112: call,-,-,puti_1
113: par,'\n',V,-
114: call,-,-,putc_1
115: par,"51 - 100 = ",R,-
116: call,-,-,puts_1
117: -,51,100,$33
118: par,$33,V,-
119: call,-,-,puti_1
120: par,'\n',V,-
121: call,-,-,putc_1
122: par,"5 * 12 = ",R,-
123: call,-,-,puts_1
124: *,5,12,$34
125: par,$34,V,-
126: call,-,-,puti_1
127: par,'\n',V,-
128: call,-,-,putc_1
129: par,"10 div 3 = ",R,-
130: call,-,-,puts_1
131: div,10,3,$35
132: par,$35,V,-
133: call,-,-,puti_1
134: par,'\n',V,-
135: call,-,-,putc_1
136: par,"5 * 6 = ",R,-
137: call,-,-,puts_1
138: *,5,6,$36
139: par,$36,V,-
140: call,-,-,puti_1
141: par,'\n',V,-
142: call,-,-,putc_1
143: par,'\n',V,-
144: call,-,-,putc_1
145: par,'\n',V,-
146: call,-,-,putc_1
147: :=,0,-,i
148: <,i,20,150
149: jump,-,-,180
150: div,i,10,$37
151: par,$37,V,-
152: call,-,-,puti_1
153: par,' ',V,-
154: call,-,-,putc_1
155: mod,i,10,$38
156: par,$38,V,-
157: call,-,-,puti_1
158: par,' ',V,-
159: call,-,-,putc_1
160: div,i,10,$39
161: mod,i,10,$40
162: *,$39,10,$41
163: +,$40,$41,$42
164: array,x,$42,$43
165: :=,i,-,[$43]
166: div,i,10,$44
167: mod,i,10,$45
168: *,$44,10,$46
169: +,$45,$46,$47
170: array,x,$47,$48
171: par,[$48],V,-
172: call,-,-,puti_1
173: par,'\n',V,-
174: call,-,-,putc_1
175: par,'\n',V,-
176: call,-,-,putc_1
177: +,i,1,$49
178: :=,$49,-,i
179: jump,-,-,148
180: :=,'a',-,chr
181: par,chr,V,-
182: call,-,-,putc_1
183: par,'\n',V,-
184: call,-,-,putc_1
185: par,"Calling foo with i: ",R,-
186: call,-,-,puts_1
187: par,i,V,-
188: call,-,-,puti_1
189: par,'\n',V,-
190: call,-,-,putc_1
191: :=,0,-,j
192: par,x,R,-
193: par,$50,RET,-
194: call,-,-,foo_2
195: :=,$50,-,ret
196: par,"Foo returned : ",R,-
197: call,-,-,puts_1
198: par,ret,V,-
199: call,-,-,puti_1
200: par,'\n',V,-
201: call,-,-,putc_1
202: par,"i is : ",R,-
203: call,-,-,puts_1
204: par,i,V,-
205: call,-,-,puti_1
206: par,'\n',V,-
207: call,-,-,putc_1
208: par,chr,V,-
209: call,-,-,putc_1
210: par,'\n',V,-
211: call,-,-,putc_1
212: par,'\n',V,-
213: call,-,-,putc_1
214: endu,main_1,-,-
