/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseStmt extends PIfElseStmt
{
    private TIf _if_;
    private PCond _cond_;
    private PThenStmtWelse _thenStmtWelse_;
    private PElseStmtWithElse _elseStmtWithElse_;

    public AIfElseStmt()
    {
        // Constructor
    }

    public AIfElseStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PCond _cond_,
        @SuppressWarnings("hiding") PThenStmtWelse _thenStmtWelse_,
        @SuppressWarnings("hiding") PElseStmtWithElse _elseStmtWithElse_)
    {
        // Constructor
        setIf(_if_);

        setCond(_cond_);

        setThenStmtWelse(_thenStmtWelse_);

        setElseStmtWithElse(_elseStmtWithElse_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseStmt(
            cloneNode(this._if_),
            cloneNode(this._cond_),
            cloneNode(this._thenStmtWelse_),
            cloneNode(this._elseStmtWithElse_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PCond getCond()
    {
        return this._cond_;
    }

    public void setCond(PCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public PThenStmtWelse getThenStmtWelse()
    {
        return this._thenStmtWelse_;
    }

    public void setThenStmtWelse(PThenStmtWelse node)
    {
        if(this._thenStmtWelse_ != null)
        {
            this._thenStmtWelse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenStmtWelse_ = node;
    }

    public PElseStmtWithElse getElseStmtWithElse()
    {
        return this._elseStmtWithElse_;
    }

    public void setElseStmtWithElse(PElseStmtWithElse node)
    {
        if(this._elseStmtWithElse_ != null)
        {
            this._elseStmtWithElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseStmtWithElse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._cond_)
            + toString(this._thenStmtWelse_)
            + toString(this._elseStmtWithElse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._thenStmtWelse_ == child)
        {
            this._thenStmtWelse_ = null;
            return;
        }

        if(this._elseStmtWithElse_ == child)
        {
            this._elseStmtWithElse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PCond) newChild);
            return;
        }

        if(this._thenStmtWelse_ == oldChild)
        {
            setThenStmtWelse((PThenStmtWelse) newChild);
            return;
        }

        if(this._elseStmtWithElse_ == oldChild)
        {
            setElseStmtWithElse((PElseStmtWithElse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
