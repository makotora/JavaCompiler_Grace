/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AType extends PType
{
    private PDataType _dataType_;
    private PArrayBrackList _arrayBrackList_;

    public AType()
    {
        // Constructor
    }

    public AType(
        @SuppressWarnings("hiding") PDataType _dataType_,
        @SuppressWarnings("hiding") PArrayBrackList _arrayBrackList_)
    {
        // Constructor
        setDataType(_dataType_);

        setArrayBrackList(_arrayBrackList_);

    }

    @Override
    public Object clone()
    {
        return new AType(
            cloneNode(this._dataType_),
            cloneNode(this._arrayBrackList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAType(this);
    }

    public PDataType getDataType()
    {
        return this._dataType_;
    }

    public void setDataType(PDataType node)
    {
        if(this._dataType_ != null)
        {
            this._dataType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataType_ = node;
    }

    public PArrayBrackList getArrayBrackList()
    {
        return this._arrayBrackList_;
    }

    public void setArrayBrackList(PArrayBrackList node)
    {
        if(this._arrayBrackList_ != null)
        {
            this._arrayBrackList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayBrackList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dataType_)
            + toString(this._arrayBrackList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dataType_ == child)
        {
            this._dataType_ = null;
            return;
        }

        if(this._arrayBrackList_ == child)
        {
            this._arrayBrackList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dataType_ == oldChild)
        {
            setDataType((PDataType) newChild);
            return;
        }

        if(this._arrayBrackList_ == oldChild)
        {
            setArrayBrackList((PArrayBrackList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
