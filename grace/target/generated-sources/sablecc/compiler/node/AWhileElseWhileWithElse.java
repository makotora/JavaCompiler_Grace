/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AWhileElseWhileWithElse extends PWhileWithElse
{
    private TWhile _while_;
    private PCond _cond_;
    private PDoStmtWelse _doStmtWelse_;

    public AWhileElseWhileWithElse()
    {
        // Constructor
    }

    public AWhileElseWhileWithElse(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PCond _cond_,
        @SuppressWarnings("hiding") PDoStmtWelse _doStmtWelse_)
    {
        // Constructor
        setWhile(_while_);

        setCond(_cond_);

        setDoStmtWelse(_doStmtWelse_);

    }

    @Override
    public Object clone()
    {
        return new AWhileElseWhileWithElse(
            cloneNode(this._while_),
            cloneNode(this._cond_),
            cloneNode(this._doStmtWelse_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileElseWhileWithElse(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PCond getCond()
    {
        return this._cond_;
    }

    public void setCond(PCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public PDoStmtWelse getDoStmtWelse()
    {
        return this._doStmtWelse_;
    }

    public void setDoStmtWelse(PDoStmtWelse node)
    {
        if(this._doStmtWelse_ != null)
        {
            this._doStmtWelse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doStmtWelse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._cond_)
            + toString(this._doStmtWelse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._doStmtWelse_ == child)
        {
            this._doStmtWelse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PCond) newChild);
            return;
        }

        if(this._doStmtWelse_ == oldChild)
        {
            setDoStmtWelse((PDoStmtWelse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
