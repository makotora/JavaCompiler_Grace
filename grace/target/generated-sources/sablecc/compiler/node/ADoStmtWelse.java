/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ADoStmtWelse extends PDoStmtWelse
{
    private TDo _do_;
    private PStmtWithElse _stmtWithElse_;

    public ADoStmtWelse()
    {
        // Constructor
    }

    public ADoStmtWelse(
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PStmtWithElse _stmtWithElse_)
    {
        // Constructor
        setDo(_do_);

        setStmtWithElse(_stmtWithElse_);

    }

    @Override
    public Object clone()
    {
        return new ADoStmtWelse(
            cloneNode(this._do_),
            cloneNode(this._stmtWithElse_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADoStmtWelse(this);
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PStmtWithElse getStmtWithElse()
    {
        return this._stmtWithElse_;
    }

    public void setStmtWithElse(PStmtWithElse node)
    {
        if(this._stmtWithElse_ != null)
        {
            this._stmtWithElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtWithElse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._do_)
            + toString(this._stmtWithElse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._stmtWithElse_ == child)
        {
            this._stmtWithElse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._stmtWithElse_ == oldChild)
        {
            setStmtWithElse((PStmtWithElse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
