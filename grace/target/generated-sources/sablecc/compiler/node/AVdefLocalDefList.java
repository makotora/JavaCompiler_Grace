/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AVdefLocalDefList extends PLocalDefList
{
    private PVarDef _varDef_;
    private final LinkedList<PLocalDefTail> _localDefTail_ = new LinkedList<PLocalDefTail>();

    public AVdefLocalDefList()
    {
        // Constructor
    }

    public AVdefLocalDefList(
        @SuppressWarnings("hiding") PVarDef _varDef_,
        @SuppressWarnings("hiding") List<PLocalDefTail> _localDefTail_)
    {
        // Constructor
        setVarDef(_varDef_);

        setLocalDefTail(_localDefTail_);

    }

    @Override
    public Object clone()
    {
        return new AVdefLocalDefList(
            cloneNode(this._varDef_),
            cloneList(this._localDefTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVdefLocalDefList(this);
    }

    public PVarDef getVarDef()
    {
        return this._varDef_;
    }

    public void setVarDef(PVarDef node)
    {
        if(this._varDef_ != null)
        {
            this._varDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varDef_ = node;
    }

    public LinkedList<PLocalDefTail> getLocalDefTail()
    {
        return this._localDefTail_;
    }

    public void setLocalDefTail(List<PLocalDefTail> list)
    {
        this._localDefTail_.clear();
        this._localDefTail_.addAll(list);
        for(PLocalDefTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varDef_)
            + toString(this._localDefTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varDef_ == child)
        {
            this._varDef_ = null;
            return;
        }

        if(this._localDefTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varDef_ == oldChild)
        {
            setVarDef((PVarDef) newChild);
            return;
        }

        for(ListIterator<PLocalDefTail> i = this._localDefTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLocalDefTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
