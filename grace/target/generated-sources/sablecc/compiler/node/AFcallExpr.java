/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFcallExpr extends PExpr
{
    private final LinkedList<PSign> _sign_ = new LinkedList<PSign>();
    private PFuncCall _funcCall_;

    public AFcallExpr()
    {
        // Constructor
    }

    public AFcallExpr(
        @SuppressWarnings("hiding") List<PSign> _sign_,
        @SuppressWarnings("hiding") PFuncCall _funcCall_)
    {
        // Constructor
        setSign(_sign_);

        setFuncCall(_funcCall_);

    }

    @Override
    public Object clone()
    {
        return new AFcallExpr(
            cloneList(this._sign_),
            cloneNode(this._funcCall_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFcallExpr(this);
    }

    public LinkedList<PSign> getSign()
    {
        return this._sign_;
    }

    public void setSign(List<PSign> list)
    {
        this._sign_.clear();
        this._sign_.addAll(list);
        for(PSign e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PFuncCall getFuncCall()
    {
        return this._funcCall_;
    }

    public void setFuncCall(PFuncCall node)
    {
        if(this._funcCall_ != null)
        {
            this._funcCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcCall_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sign_)
            + toString(this._funcCall_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sign_.remove(child))
        {
            return;
        }

        if(this._funcCall_ == child)
        {
            this._funcCall_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PSign> i = this._sign_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSign) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._funcCall_ == oldChild)
        {
            setFuncCall((PFuncCall) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
