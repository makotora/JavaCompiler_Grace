/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AOrCond extends PCond
{
    private PCond _cond_;
    private TOr _or_;
    private PCterm _cterm_;

    public AOrCond()
    {
        // Constructor
    }

    public AOrCond(
        @SuppressWarnings("hiding") PCond _cond_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") PCterm _cterm_)
    {
        // Constructor
        setCond(_cond_);

        setOr(_or_);

        setCterm(_cterm_);

    }

    @Override
    public Object clone()
    {
        return new AOrCond(
            cloneNode(this._cond_),
            cloneNode(this._or_),
            cloneNode(this._cterm_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrCond(this);
    }

    public PCond getCond()
    {
        return this._cond_;
    }

    public void setCond(PCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public PCterm getCterm()
    {
        return this._cterm_;
    }

    public void setCterm(PCterm node)
    {
        if(this._cterm_ != null)
        {
            this._cterm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cterm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cond_)
            + toString(this._or_)
            + toString(this._cterm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._cterm_ == child)
        {
            this._cterm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cond_ == oldChild)
        {
            setCond((PCond) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._cterm_ == oldChild)
        {
            setCterm((PCterm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
