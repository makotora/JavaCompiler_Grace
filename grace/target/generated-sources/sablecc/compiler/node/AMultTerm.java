/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AMultTerm extends PTerm
{
    private PTerm _term_;
    private TMult _mult_;
    private PFact _fact_;

    public AMultTerm()
    {
        // Constructor
    }

    public AMultTerm(
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") TMult _mult_,
        @SuppressWarnings("hiding") PFact _fact_)
    {
        // Constructor
        setTerm(_term_);

        setMult(_mult_);

        setFact(_fact_);

    }

    @Override
    public Object clone()
    {
        return new AMultTerm(
            cloneNode(this._term_),
            cloneNode(this._mult_),
            cloneNode(this._fact_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultTerm(this);
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public TMult getMult()
    {
        return this._mult_;
    }

    public void setMult(TMult node)
    {
        if(this._mult_ != null)
        {
            this._mult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mult_ = node;
    }

    public PFact getFact()
    {
        return this._fact_;
    }

    public void setFact(PFact node)
    {
        if(this._fact_ != null)
        {
            this._fact_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fact_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._term_)
            + toString(this._mult_)
            + toString(this._fact_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._mult_ == child)
        {
            this._mult_ = null;
            return;
        }

        if(this._fact_ == child)
        {
            this._fact_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(this._mult_ == oldChild)
        {
            setMult((TMult) newChild);
            return;
        }

        if(this._fact_ == oldChild)
        {
            setFact((PFact) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
