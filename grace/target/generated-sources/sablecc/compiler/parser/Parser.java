/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AIntDataType */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce ACharDataType */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAtype1Type */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAtype2Type */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce ASomethingRetType */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce ANothingRetType */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AAstatfpartype1FparType */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AAstatfpartype2FparType */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AAstatfpartype3FparType */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AAstatfpartype4FparType */
		    {
			ArrayList list = new10();
			push(goTo(4), list, false);
		    }
		    break;
                    case 11: /* reduce AEmptyBrack */
		    {
			ArrayList list = new11();
			push(goTo(5), list, false);
		    }
		    break;
                    case 12: /* reduce AArrayBrack */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AVarDef */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AAidlist1IdList */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce AAidlist2IdList */
		    {
			ArrayList list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce AIdListTail */
		    {
			ArrayList list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce AAheader1Header */
		    {
			ArrayList list = new17();
			push(goTo(10), list, false);
		    }
		    break;
                    case 18: /* reduce AAheader2Header */
		    {
			ArrayList list = new18();
			push(goTo(10), list, false);
		    }
		    break;
                    case 19: /* reduce AAfpardeflist1FparDefList */
		    {
			ArrayList list = new19();
			push(goTo(11), list, false);
		    }
		    break;
                    case 20: /* reduce AAfpardeflist2FparDefList */
		    {
			ArrayList list = new20();
			push(goTo(11), list, false);
		    }
		    break;
                    case 21: /* reduce AAfpardef1FparDef */
		    {
			ArrayList list = new21();
			push(goTo(12), list, false);
		    }
		    break;
                    case 22: /* reduce AAfpardef2FparDef */
		    {
			ArrayList list = new22();
			push(goTo(12), list, false);
		    }
		    break;
                    case 23: /* reduce AParListTail */
		    {
			ArrayList list = new23();
			push(goTo(13), list, false);
		    }
		    break;
                    case 24: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList list = new24();
			push(goTo(14), list, false);
		    }
		    break;
                    case 25: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList list = new25();
			push(goTo(14), list, false);
		    }
		    break;
                    case 26: /* reduce AFuncDecl */
		    {
			ArrayList list = new26();
			push(goTo(15), list, false);
		    }
		    break;
                    case 27: /* reduce AFdefLocalDef */
		    {
			ArrayList list = new27();
			push(goTo(16), list, false);
		    }
		    break;
                    case 28: /* reduce AFdecLocalDef */
		    {
			ArrayList list = new28();
			push(goTo(16), list, false);
		    }
		    break;
                    case 29: /* reduce AVdefLocalDef */
		    {
			ArrayList list = new29();
			push(goTo(16), list, false);
		    }
		    break;
                    case 30: /* reduce AAblock1Block */
		    {
			ArrayList list = new30();
			push(goTo(17), list, false);
		    }
		    break;
                    case 31: /* reduce AAblock2Block */
		    {
			ArrayList list = new31();
			push(goTo(17), list, false);
		    }
		    break;
                    case 32: /* reduce AAfunccall1FuncCall */
		    {
			ArrayList list = new32();
			push(goTo(18), list, false);
		    }
		    break;
                    case 33: /* reduce AAfunccall2FuncCall */
		    {
			ArrayList list = new33();
			push(goTo(18), list, false);
		    }
		    break;
                    case 34: /* reduce AAexprlist1ExprList */
		    {
			ArrayList list = new34();
			push(goTo(19), list, false);
		    }
		    break;
                    case 35: /* reduce AAexprlist2ExprList */
		    {
			ArrayList list = new35();
			push(goTo(19), list, false);
		    }
		    break;
                    case 36: /* reduce AExprTail */
		    {
			ArrayList list = new36();
			push(goTo(20), list, false);
		    }
		    break;
                    case 37: /* reduce AIdLvalue */
		    {
			ArrayList list = new37();
			push(goTo(21), list, false);
		    }
		    break;
                    case 38: /* reduce AStringLvalue */
		    {
			ArrayList list = new38();
			push(goTo(21), list, false);
		    }
		    break;
                    case 39: /* reduce ALvalueLvalue */
		    {
			ArrayList list = new39();
			push(goTo(21), list, false);
		    }
		    break;
                    case 40: /* reduce ATermExpr */
		    {
			ArrayList list = new40();
			push(goTo(22), list, false);
		    }
		    break;
                    case 41: /* reduce AAddExpr */
		    {
			ArrayList list = new41();
			push(goTo(22), list, false);
		    }
		    break;
                    case 42: /* reduce ASubExpr */
		    {
			ArrayList list = new42();
			push(goTo(22), list, false);
		    }
		    break;
                    case 43: /* reduce AFactTerm */
		    {
			ArrayList list = new43();
			push(goTo(23), list, false);
		    }
		    break;
                    case 44: /* reduce AMultTerm */
		    {
			ArrayList list = new44();
			push(goTo(23), list, false);
		    }
		    break;
                    case 45: /* reduce ADivTerm */
		    {
			ArrayList list = new45();
			push(goTo(23), list, false);
		    }
		    break;
                    case 46: /* reduce ANumberFact */
		    {
			ArrayList list = new46();
			push(goTo(24), list, false);
		    }
		    break;
                    case 47: /* reduce ACharFact */
		    {
			ArrayList list = new47();
			push(goTo(24), list, false);
		    }
		    break;
                    case 48: /* reduce AFcallFact */
		    {
			ArrayList list = new48();
			push(goTo(24), list, false);
		    }
		    break;
                    case 49: /* reduce ALvalFact */
		    {
			ArrayList list = new49();
			push(goTo(24), list, false);
		    }
		    break;
                    case 50: /* reduce AParenFact */
		    {
			ArrayList list = new50();
			push(goTo(24), list, false);
		    }
		    break;
                    case 51: /* reduce ACtermCond */
		    {
			ArrayList list = new51();
			push(goTo(25), list, false);
		    }
		    break;
                    case 52: /* reduce AOrCond */
		    {
			ArrayList list = new52();
			push(goTo(25), list, false);
		    }
		    break;
                    case 53: /* reduce ACfactCterm */
		    {
			ArrayList list = new53();
			push(goTo(26), list, false);
		    }
		    break;
                    case 54: /* reduce AAndCterm */
		    {
			ArrayList list = new54();
			push(goTo(26), list, false);
		    }
		    break;
                    case 55: /* reduce ACompCfact */
		    {
			ArrayList list = new55();
			push(goTo(27), list, false);
		    }
		    break;
                    case 56: /* reduce ANotCfact */
		    {
			ArrayList list = new56();
			push(goTo(27), list, false);
		    }
		    break;
                    case 57: /* reduce AEqComp */
		    {
			ArrayList list = new57();
			push(goTo(28), list, false);
		    }
		    break;
                    case 58: /* reduce ANeqComp */
		    {
			ArrayList list = new58();
			push(goTo(28), list, false);
		    }
		    break;
                    case 59: /* reduce ALeqComp */
		    {
			ArrayList list = new59();
			push(goTo(28), list, false);
		    }
		    break;
                    case 60: /* reduce AGeqComp */
		    {
			ArrayList list = new60();
			push(goTo(28), list, false);
		    }
		    break;
                    case 61: /* reduce ALtComp */
		    {
			ArrayList list = new61();
			push(goTo(28), list, false);
		    }
		    break;
                    case 62: /* reduce AGtComp */
		    {
			ArrayList list = new62();
			push(goTo(28), list, false);
		    }
		    break;
                    case 63: /* reduce ACparenComp */
		    {
			ArrayList list = new63();
			push(goTo(28), list, false);
		    }
		    break;
                    case 64: /* reduce AExpr2 */
		    {
			ArrayList list = new64();
			push(goTo(29), list, false);
		    }
		    break;
                    case 65: /* reduce ANoopStmt */
		    {
			ArrayList list = new65();
			push(goTo(30), list, false);
		    }
		    break;
                    case 66: /* reduce AAssignmentStmt */
		    {
			ArrayList list = new66();
			push(goTo(30), list, false);
		    }
		    break;
                    case 67: /* reduce ABlockStmt */
		    {
			ArrayList list = new67();
			push(goTo(30), list, false);
		    }
		    break;
                    case 68: /* reduce AFcallStmt */
		    {
			ArrayList list = new68();
			push(goTo(30), list, false);
		    }
		    break;
                    case 69: /* reduce ATerminal$ArrayBrack */
		    {
			ArrayList list = new69();
			push(goTo(31), list, true);
		    }
		    break;
                    case 70: /* reduce ANonTerminal$ArrayBrack */
		    {
			ArrayList list = new70();
			push(goTo(31), list, true);
		    }
		    break;
                    case 71: /* reduce ATerminal$IdListTail */
		    {
			ArrayList list = new71();
			push(goTo(32), list, true);
		    }
		    break;
                    case 72: /* reduce ANonTerminal$IdListTail */
		    {
			ArrayList list = new72();
			push(goTo(32), list, true);
		    }
		    break;
                    case 73: /* reduce ATerminal$ParListTail */
		    {
			ArrayList list = new73();
			push(goTo(33), list, true);
		    }
		    break;
                    case 74: /* reduce ANonTerminal$ParListTail */
		    {
			ArrayList list = new74();
			push(goTo(33), list, true);
		    }
		    break;
                    case 75: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new75();
			push(goTo(34), list, true);
		    }
		    break;
                    case 76: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new76();
			push(goTo(34), list, true);
		    }
		    break;
                    case 77: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new77();
			push(goTo(35), list, true);
		    }
		    break;
                    case 78: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new78();
			push(goTo(35), list, true);
		    }
		    break;
                    case 79: /* reduce ATerminal$ExprTail */
		    {
			ArrayList list = new79();
			push(goTo(36), list, true);
		    }
		    break;
                    case 80: /* reduce ANonTerminal$ExprTail */
		    {
			ArrayList list = new80();
			push(goTo(36), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntDataType(tintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ACharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharDataType(tcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode3 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ASomethingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ASomethingRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAstatfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AStatFparType(pdatatypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAstatfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrack pemptybrackNode3;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybrackNode3 = (PEmptyBrack)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AStatFparType(pdatatypeNode2, pemptybrackNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAstatfpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AStatFparType(pdatatypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAstatfpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrack pemptybrackNode3;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybrackNode3 = (PEmptyBrack)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AStatFparType(pdatatypeNode2, pemptybrackNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AEmptyBrack */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmptyBrack pemptybrackNode1;
        {
            // Block
        TLbrack tlbrackNode2;
        TRbrack trbrackNode3;
        tlbrackNode2 = (TLbrack)nodeArrayList1.get(0);
        trbrackNode3 = (TRbrack)nodeArrayList2.get(0);

        pemptybrackNode1 = new AEmptyBrack(tlbrackNode2, trbrackNode3);
        }
	nodeList.add(pemptybrackNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AArrayBrack */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayBrack parraybrackNode1;
        {
            // Block
        TLbrack tlbrackNode2;
        TNumber tnumberNode3;
        TRbrack trbrackNode4;
        tlbrackNode2 = (TLbrack)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        trbrackNode4 = (TRbrack)nodeArrayList3.get(0);

        parraybrackNode1 = new AArrayBrack(tlbrackNode2, tnumberNode3, trbrackNode4);
        }
	nodeList.add(parraybrackNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AVarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TVar tvarNode2;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        pidlistNode3 = (PIdList)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDef(tvarNode2, pidlistNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAidlist1IdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdList pidlistNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pidlistNode1 = new AIdList(tidNode2, listNode3);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAidlist2IdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdList pidlistNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pidlistNode1 = new AIdList(tidNode2, listNode4);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AIdListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdListTail pidlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pidlisttailNode1 = new AIdListTail(tcommaNode2, tidNode3);
        }
	nodeList.add(pidlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLpar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRpar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLpar)nodeArrayList3.get(0);
        trparNode6 = (TRpar)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        prettypeNode8 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeader(tfunNode2, tidNode3, tlparNode4, null, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLpar tlparNode4;
        PFparDefList pfpardeflistNode5;
        TRpar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLpar)nodeArrayList3.get(0);
        pfpardeflistNode5 = (PFparDefList)nodeArrayList4.get(0);
        trparNode6 = (TRpar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        prettypeNode8 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tfunNode2, tidNode3, tlparNode4, pfpardeflistNode5, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAfpardeflist1FparDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDefList pfpardeflistNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode3 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpardeflistNode1 = new AFparDefList(pfpardefNode2, listNode3);
        }
	nodeList.add(pfpardeflistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAfpardeflist2FparDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDefList pfpardeflistNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode4 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfpardeflistNode1 = new AFparDefList(pfpardefNode2, listNode4);
        }
	nodeList.add(pfpardeflistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PFparType pfpartypeNode5;
        pidlistNode3 = (PIdList)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        pfpartypeNode5 = (PFparType)nodeArrayList3.get(0);

        pfpardefNode1 = new AFparDef(null, pidlistNode3, tcolonNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PFparType pfpartypeNode5;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        pidlistNode3 = (PIdList)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode5 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(trefNode2, pidlistNode3, tcolonNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AParListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParListTail pparlisttailNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PFparDef pfpardefNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pfpardefNode3 = (PFparDef)nodeArrayList2.get(0);

        pparlisttailNode1 = new AParListTail(tsemicolonNode2, pfpardefNode3);
        }
	nodeList.add(pparlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemicolon tsemicolonNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2, tsemicolonNode3);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AFdefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AFdecLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdecLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AVdefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVdefLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList listNode3 = new LinkedList();
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRbrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList listNode4 = new LinkedList();
        TRbrace trbraceNode5;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRbrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TLpar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRpar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLpar)nodeArrayList2.get(0);
        trparNode5 = (TRpar)nodeArrayList3.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TLpar tlparNode3;
        PExprList pexprlistNode4;
        TRpar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLpar)nodeArrayList2.get(0);
        pexprlistNode4 = (PExprList)nodeArrayList3.get(0);
        trparNode5 = (TRpar)nodeArrayList4.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, tlparNode3, pexprlistNode4, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAexprlist1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList listNode3 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pexprlistNode1 = new AExprList(pexprNode2, listNode3);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAexprlist2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList listNode4 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexprlistNode1 = new AExprList(pexprNode2, listNode4);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprTail pexprtailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprtailNode1 = new AExprTail(tcommaNode2, pexprNode3);
        }
	nodeList.add(pexprtailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AIdLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalueNode1 = new AIdLvalue(tidNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AStringLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        plvalueNode1 = new AStringLvalue(tstringNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ALvalueLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        PLvalue plvalueNode2;
        TLbrack tlbrackNode3;
        PExpr pexprNode4;
        TRbrack trbrackNode5;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        tlbrackNode3 = (TLbrack)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbrackNode5 = (TRbrack)nodeArrayList4.get(0);

        plvalueNode1 = new ALvalueLvalue(plvalueNode2, tlbrackNode3, pexprNode4, trbrackNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ASubExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new ASubExpr(pexprNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AFactTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFact pfactNode2;
        pfactNode2 = (PFact)nodeArrayList1.get(0);

        ptermNode1 = new AFactTerm(pfactNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PFact pfactNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfactNode4 = (PFact)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultNode3, pfactNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDiv tdivNode3;
        PFact pfactNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfactNode4 = (PFact)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tdivNode3, pfactNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ANumberFact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFact pfactNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pfactNode1 = new ANumberFact(tnumberNode2);
        }
	nodeList.add(pfactNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ACharFact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFact pfactNode1;
        {
            // Block
        TSingleChar tsinglecharNode2;
        tsinglecharNode2 = (TSingleChar)nodeArrayList1.get(0);

        pfactNode1 = new ACharFact(tsinglecharNode2);
        }
	nodeList.add(pfactNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AFcallFact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFact pfactNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pfactNode1 = new AFcallFact(pfunccallNode2);
        }
	nodeList.add(pfactNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ALvalFact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFact pfactNode1;
        {
            // Block
        PLvalue plvalueNode2;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);

        pfactNode1 = new ALvalFact(plvalueNode2);
        }
	nodeList.add(pfactNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AParenFact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFact pfactNode1;
        {
            // Block
        TLpar tlparNode2;
        PExpr pexprNode3;
        TRpar trparNode4;
        tlparNode2 = (TLpar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRpar)nodeArrayList3.get(0);

        pfactNode1 = new AParenFact(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pfactNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ACtermCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCterm pctermNode2;
        pctermNode2 = (PCterm)nodeArrayList1.get(0);

        pcondNode1 = new ACtermCond(pctermNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AOrCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        TOr torNode3;
        PCterm pctermNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pctermNode4 = (PCterm)nodeArrayList3.get(0);

        pcondNode1 = new AOrCond(pcondNode2, torNode3, pctermNode4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ACfactCterm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCterm pctermNode1;
        {
            // Block
        PCfact pcfactNode2;
        pcfactNode2 = (PCfact)nodeArrayList1.get(0);

        pctermNode1 = new ACfactCterm(pcfactNode2);
        }
	nodeList.add(pctermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AAndCterm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCterm pctermNode1;
        {
            // Block
        PCterm pctermNode2;
        TAnd tandNode3;
        PCfact pcfactNode4;
        pctermNode2 = (PCterm)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcfactNode4 = (PCfact)nodeArrayList3.get(0);

        pctermNode1 = new AAndCterm(pctermNode2, tandNode3, pcfactNode4);
        }
	nodeList.add(pctermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce ACompCfact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfact pcfactNode1;
        {
            // Block
        PComp pcompNode2;
        pcompNode2 = (PComp)nodeArrayList1.get(0);

        pcfactNode1 = new ACompCfact(pcompNode2);
        }
	nodeList.add(pcfactNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ANotCfact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfact pcfactNode1;
        {
            // Block
        TNot tnotNode2;
        PCfact pcfactNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pcfactNode3 = (PCfact)nodeArrayList2.get(0);

        pcfactNode1 = new ANotCfact(tnotNode2, pcfactNode3);
        }
	nodeList.add(pcfactNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AEqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TEq teqNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pcompNode1 = new AEqComp(pexprNode2, teqNode3, pexpr2Node4);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce ANeqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TNeq tneqNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pcompNode1 = new ANeqComp(pexprNode2, tneqNode3, pexpr2Node4);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ALeqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TLeq tleqNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tleqNode3 = (TLeq)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pcompNode1 = new ALeqComp(pexprNode2, tleqNode3, pexpr2Node4);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AGeqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TGeq tgeqNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tgeqNode3 = (TGeq)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pcompNode1 = new AGeqComp(pexprNode2, tgeqNode3, pexpr2Node4);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ALtComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TLt tltNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pcompNode1 = new ALtComp(pexprNode2, tltNode3, pexpr2Node4);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AGtComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TGt tgtNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pcompNode1 = new AGtComp(pexprNode2, tgtNode3, pexpr2Node4);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ACparenComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        TLpar tlparNode2;
        PCond pcondNode3;
        TRpar trparNode4;
        tlparNode2 = (TLpar)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        trparNode4 = (TRpar)nodeArrayList3.get(0);

        pcompNode1 = new ACparenComp(tlparNode2, pcondNode3, trparNode4);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pexpr2Node1 = new AExpr2(pexprNode2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ANoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstmtNode1 = new ANoopStmt(tsemicolonNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AAssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLvalue plvalueNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        TSemicolon tsemicolonNode5;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignmentStmt(plvalueNode2, tassignNode3, pexprNode4, tsemicolonNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtNode1 = new ABlockStmt(pblockNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AFcallStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TSemicolon tsemicolonNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmtNode1 = new AFcallStmt(pfunccallNode2, tsemicolonNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ATerminal$ArrayBrack */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PArrayBrack parraybrackNode1;
        parraybrackNode1 = (PArrayBrack)nodeArrayList1.get(0);
	if(parraybrackNode1 != null)
	{
	  listNode2.add(parraybrackNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ANonTerminal$ArrayBrack */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PArrayBrack parraybrackNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraybrackNode2 = (PArrayBrack)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraybrackNode2 != null)
	{
	  listNode3.add(parraybrackNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ATerminal$IdListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PIdListTail pidlisttailNode1;
        pidlisttailNode1 = (PIdListTail)nodeArrayList1.get(0);
	if(pidlisttailNode1 != null)
	{
	  listNode2.add(pidlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ANonTerminal$IdListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PIdListTail pidlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pidlisttailNode2 = (PIdListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidlisttailNode2 != null)
	{
	  listNode3.add(pidlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ATerminal$ParListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParListTail pparlisttailNode1;
        pparlisttailNode1 = (PParListTail)nodeArrayList1.get(0);
	if(pparlisttailNode1 != null)
	{
	  listNode2.add(pparlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ANonTerminal$ParListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParListTail pparlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparlisttailNode2 = (PParListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparlisttailNode2 != null)
	{
	  listNode3.add(pparlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ATerminal$ExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExprTail pexprtailNode1;
        pexprtailNode1 = (PExprTail)nodeArrayList1.get(0);
	if(pexprtailNode1 != null)
	{
	  listNode2.add(pexprtailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ANonTerminal$ExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExprTail pexprtailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprtailNode2 = (PExprTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprtailNode2 != null)
	{
	  listNode3.add(pexprtailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 1}, {17, SHIFT, 5}, },
			{{-1, ERROR, 2}, {40, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {5, SHIFT, 1}, {15, SHIFT, 6}, {25, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 5}, {21, SHIFT, 15}, },
			{{-1, ERROR, 6}, {17, SHIFT, 16}, },
			{{-1, ERROR, 7}, {17, SHIFT, 18}, {20, SHIFT, 19}, {25, SHIFT, 7}, {26, SHIFT, 20}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 9}, {5, SHIFT, 1}, {15, SHIFT, 6}, {25, SHIFT, 7}, {28, SHIFT, 27}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 14}, {5, SHIFT, 1}, {15, SHIFT, 6}, {25, SHIFT, 7}, },
			{{-1, ERROR, 15}, {12, SHIFT, 30}, {17, SHIFT, 16}, {22, SHIFT, 31}, },
			{{-1, REDUCE, 14}, {27, SHIFT, 35}, },
			{{-1, ERROR, 17}, {29, SHIFT, 38}, },
			{{-1, REDUCE, 37}, {21, SHIFT, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 23}, {28, SHIFT, 40}, },
			{{-1, ERROR, 24}, {23, SHIFT, 41}, {30, SHIFT, 42}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 26}, {17, SHIFT, 18}, {20, SHIFT, 19}, {25, SHIFT, 7}, {26, SHIFT, 43}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 30}, {17, SHIFT, 16}, },
			{{-1, ERROR, 31}, {29, SHIFT, 46}, },
			{{-1, ERROR, 32}, {29, SHIFT, 47}, },
			{{-1, ERROR, 33}, {22, SHIFT, 48}, },
			{{-1, REDUCE, 19}, {28, SHIFT, 49}, },
			{{-1, ERROR, 35}, {17, SHIFT, 52}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 15}, {27, SHIFT, 35}, },
			{{-1, ERROR, 38}, {1, SHIFT, 54}, {7, SHIFT, 55}, },
			{{-1, ERROR, 39}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, {22, SHIFT, 61}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 41}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, ERROR, 42}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 45}, {29, SHIFT, 70}, },
			{{-1, ERROR, 46}, {1, SHIFT, 54}, {7, SHIFT, 55}, {10, SHIFT, 71}, },
			{{-1, ERROR, 47}, {1, SHIFT, 54}, {7, SHIFT, 55}, },
			{{-1, ERROR, 48}, {29, SHIFT, 76}, },
			{{-1, ERROR, 49}, {12, SHIFT, 30}, {17, SHIFT, 16}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 20}, {28, SHIFT, 49}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, {23, SHIFT, 79}, },
			{{-1, ERROR, 57}, {28, SHIFT, 82}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 60}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 63}, {22, SHIFT, 84}, },
			{{-1, REDUCE, 49}, {23, SHIFT, 41}, },
			{{-1, REDUCE, 34}, {27, SHIFT, 85}, {31, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 40}, {2, SHIFT, 90}, {33, SHIFT, 91}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 68}, {24, SHIFT, 92}, {31, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 69}, {28, SHIFT, 93}, {31, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 70}, {1, SHIFT, 54}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 7}, {23, SHIFT, 95}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 76}, {1, SHIFT, 54}, {7, SHIFT, 55}, {10, SHIFT, 71}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 79}, {18, SHIFT, 99}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 4}, {23, SHIFT, 79}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 83}, {22, SHIFT, 101}, {31, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 85}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, ERROR, 86}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, ERROR, 87}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 35}, {27, SHIFT, 85}, },
			{{-1, ERROR, 90}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, ERROR, 91}, {17, SHIFT, 18}, {18, SHIFT, 58}, {19, SHIFT, 59}, {20, SHIFT, 19}, {21, SHIFT, 60}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 95}, {18, SHIFT, 99}, {24, SHIFT, 108}, },
			{{-1, REDUCE, 8}, {23, SHIFT, 79}, },
			{{-1, REDUCE, 9}, {23, SHIFT, 79}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 99}, {24, SHIFT, 110}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 36}, {31, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 41}, {2, SHIFT, 90}, {33, SHIFT, 91}, },
			{{-1, REDUCE, 42}, {2, SHIFT, 90}, {33, SHIFT, 91}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, {23, SHIFT, 79}, },
			{{-1, REDUCE, 12}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 74}, {38, 56}, {46, 72}, {76, 72}, },
			{{-1, 57}, },
			{{-1, 73}, {76, 98}, },
			{{-1, 75}, {70, 94}, },
			{{-1, 96}, },
			{{-1, 80}, {81, 100}, {97, 100}, {109, 100}, },
			{{-1, 8}, },
			{{-1, 32}, {6, 17}, {30, 45}, },
			{{-1, 36}, {37, 53}, },
			{{-1, 9}, {0, 3}, },
			{{-1, 33}, },
			{{-1, 34}, {49, 77}, },
			{{-1, 50}, {51, 78}, },
			{{-1, 10}, {0, 4}, },
			{{-1, 11}, },
			{{-1, 12}, {14, 28}, },
			{{-1, 13}, {7, 22}, {14, 29}, {26, 22}, },
			{{-1, 62}, {7, 23}, {26, 23}, },
			{{-1, 63}, },
			{{-1, 88}, {89, 105}, },
			{{-1, 64}, {7, 24}, {26, 24}, },
			{{-1, 65}, {41, 68}, {42, 69}, {60, 83}, {85, 102}, },
			{{-1, 66}, {86, 103}, {87, 104}, },
			{{-1, 67}, {90, 106}, {91, 107}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 25}, {26, 44}, },
			{{-1, 81}, {74, 97}, {96, 109}, },
			{{-1, 37}, },
			{{-1, 51}, },
			{{-1, 14}, },
			{{-1, 26}, },
			{{-1, 89}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: id, string, '{', '}', ';'",
			"expecting: 'fun', 'var', '{', ';'",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref', id, ')'",
			"expecting: ',', ':'",
			"expecting: ':'",
			"expecting: 'div', '(', ')', '[', ']', ',', ';', '<-', '+', '-', '*'",
			"expecting: 'div', ')', '[', ']', ',', ';', '<-', '+', '-', '*'",
			"expecting: 'fun', 'var', id, string, '{', '}', ';', EOF",
			"expecting: ';'",
			"expecting: '[', '<-'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: 'char', 'int'",
			"expecting: id, number, single char, string, '(', ')'",
			"expecting: id, number, single char, string, '('",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'ref', id",
			"expecting: 'fun', 'var', ')', '[', '{', ';'",
			"expecting: '[', ';'",
			"expecting: 'div', ')', ']', ',', ';', '+', '-', '*'",
			"expecting: 'div', ')', '[', ']', ',', ';', '+', '-', '*'",
			"expecting: ')', ',', '+', '-'",
			"expecting: ']', '+', '-'",
			"expecting: ';', '+', '-'",
			"expecting: ')', '[', ';'",
			"expecting: number",
			"expecting: ')', '+', '-'",
			"expecting: ')', ','",
			"expecting: number, ']'",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 2, 4, 1, 5, 3, 6, 3, 3, 3, 7, 3, 8, 9, 10, 11, 12, 13, 5, 5, 14, 15, 5, 5, 3, 3, 7, 1, 10, 10, 16, 17, 1, 9, 9, 18, 19, 5, 20, 20, 13, 5, 10, 21, 18, 10, 22, 17, 17, 9, 9, 23, 23, 24, 14, 25, 25, 20, 25, 25, 16, 26, 27, 25, 25, 28, 29, 18, 6, 6, 6, 30, 17, 21, 17, 17, 31, 30, 24, 3, 32, 25, 20, 20, 20, 33, 33, 20, 20, 12, 5, 17, 34, 30, 30, 6, 35, 30, 25, 27, 25, 25, 33, 25, 25, 30, 30, 30, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
