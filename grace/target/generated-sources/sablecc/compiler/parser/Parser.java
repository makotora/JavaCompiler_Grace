/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AIntDataType */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce ACharDataType */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AAtype1Type */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AAtype2Type */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce ASomethingRetType */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce ANothingRetType */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AAstatfpartype1FparType */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AAstatfpartype2FparType */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce AAstatfpartype3FparType */
		    {
			ArrayList list = new9();
			push(goTo(4), list);
		    }
		    break;
                    case 10: /* reduce AAstatfpartype4FparType */
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;
                    case 11: /* reduce AEmptyBrack */
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;
                    case 12: /* reduce AAarraybracklist1ArrayBrackList */
		    {
			ArrayList list = new12();
			push(goTo(6), list);
		    }
		    break;
                    case 13: /* reduce AAarraybracklist2ArrayBrackList */
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;
                    case 14: /* reduce AArrayBrackTail */
		    {
			ArrayList list = new14();
			push(goTo(7), list);
		    }
		    break;
                    case 15: /* reduce AVarDef */
		    {
			ArrayList list = new15();
			push(goTo(8), list);
		    }
		    break;
                    case 16: /* reduce AAidlist1IdList */
		    {
			ArrayList list = new16();
			push(goTo(9), list);
		    }
		    break;
                    case 17: /* reduce AAidlist2IdList */
		    {
			ArrayList list = new17();
			push(goTo(9), list);
		    }
		    break;
                    case 18: /* reduce AIdListTail */
		    {
			ArrayList list = new18();
			push(goTo(10), list);
		    }
		    break;
                    case 19: /* reduce AAheader1Header */
		    {
			ArrayList list = new19();
			push(goTo(11), list);
		    }
		    break;
                    case 20: /* reduce AAheader2Header */
		    {
			ArrayList list = new20();
			push(goTo(11), list);
		    }
		    break;
                    case 21: /* reduce AAfpardeflist1FparDefList */
		    {
			ArrayList list = new21();
			push(goTo(12), list);
		    }
		    break;
                    case 22: /* reduce AAfpardeflist2FparDefList */
		    {
			ArrayList list = new22();
			push(goTo(12), list);
		    }
		    break;
                    case 23: /* reduce AAfpardef1FparDef */
		    {
			ArrayList list = new23();
			push(goTo(13), list);
		    }
		    break;
                    case 24: /* reduce AAfpardef2FparDef */
		    {
			ArrayList list = new24();
			push(goTo(13), list);
		    }
		    break;
                    case 25: /* reduce AParListTail */
		    {
			ArrayList list = new25();
			push(goTo(14), list);
		    }
		    break;
                    case 26: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList list = new26();
			push(goTo(15), list);
		    }
		    break;
                    case 27: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList list = new27();
			push(goTo(15), list);
		    }
		    break;
                    case 28: /* reduce AFuncDecl */
		    {
			ArrayList list = new28();
			push(goTo(16), list);
		    }
		    break;
                    case 29: /* reduce AAfdeflocaldeflist1LocalDefList */
		    {
			ArrayList list = new29();
			push(goTo(17), list);
		    }
		    break;
                    case 30: /* reduce AAfdeflocaldeflist2LocalDefList */
		    {
			ArrayList list = new30();
			push(goTo(17), list);
		    }
		    break;
                    case 31: /* reduce AAfdeclocaldeflist1LocalDefList */
		    {
			ArrayList list = new31();
			push(goTo(17), list);
		    }
		    break;
                    case 32: /* reduce AAfdeclocaldeflist2LocalDefList */
		    {
			ArrayList list = new32();
			push(goTo(17), list);
		    }
		    break;
                    case 33: /* reduce AAvardeflocaldeflist1LocalDefList */
		    {
			ArrayList list = new33();
			push(goTo(17), list);
		    }
		    break;
                    case 34: /* reduce AAvardeflocaldeflist2LocalDefList */
		    {
			ArrayList list = new34();
			push(goTo(17), list);
		    }
		    break;
                    case 35: /* reduce AFdefLocalDefTail */
		    {
			ArrayList list = new35();
			push(goTo(18), list);
		    }
		    break;
                    case 36: /* reduce AFdecLocalDefTail */
		    {
			ArrayList list = new36();
			push(goTo(18), list);
		    }
		    break;
                    case 37: /* reduce AVdefLocalDefTail */
		    {
			ArrayList list = new37();
			push(goTo(18), list);
		    }
		    break;
                    case 38: /* reduce AAfunccall1FuncCall */
		    {
			ArrayList list = new38();
			push(goTo(19), list);
		    }
		    break;
                    case 39: /* reduce AAfunccall2FuncCall */
		    {
			ArrayList list = new39();
			push(goTo(19), list);
		    }
		    break;
                    case 40: /* reduce AAexprlist1ExprList */
		    {
			ArrayList list = new40();
			push(goTo(20), list);
		    }
		    break;
                    case 41: /* reduce AAexprlist2ExprList */
		    {
			ArrayList list = new41();
			push(goTo(20), list);
		    }
		    break;
                    case 42: /* reduce AExprTail */
		    {
			ArrayList list = new42();
			push(goTo(21), list);
		    }
		    break;
                    case 43: /* reduce AAidlvalue1Lvalue */
		    {
			ArrayList list = new43();
			push(goTo(22), list);
		    }
		    break;
                    case 44: /* reduce AAidlvalue2Lvalue */
		    {
			ArrayList list = new44();
			push(goTo(22), list);
		    }
		    break;
                    case 45: /* reduce AAstringlvalue1Lvalue */
		    {
			ArrayList list = new45();
			push(goTo(22), list);
		    }
		    break;
                    case 46: /* reduce AAstringlvalue2Lvalue */
		    {
			ArrayList list = new46();
			push(goTo(22), list);
		    }
		    break;
                    case 47: /* reduce AAlvalueexprlist1LvalueExprList */
		    {
			ArrayList list = new47();
			push(goTo(23), list);
		    }
		    break;
                    case 48: /* reduce AAlvalueexprlist2LvalueExprList */
		    {
			ArrayList list = new48();
			push(goTo(23), list);
		    }
		    break;
                    case 49: /* reduce ALvalueExprTail */
		    {
			ArrayList list = new49();
			push(goTo(24), list);
		    }
		    break;
                    case 50: /* reduce ATermExpr */
		    {
			ArrayList list = new50();
			push(goTo(25), list);
		    }
		    break;
                    case 51: /* reduce AAddExpr */
		    {
			ArrayList list = new51();
			push(goTo(25), list);
		    }
		    break;
                    case 52: /* reduce ASubExpr */
		    {
			ArrayList list = new52();
			push(goTo(25), list);
		    }
		    break;
                    case 53: /* reduce AFactTerm */
		    {
			ArrayList list = new53();
			push(goTo(26), list);
		    }
		    break;
                    case 54: /* reduce AMultTerm */
		    {
			ArrayList list = new54();
			push(goTo(26), list);
		    }
		    break;
                    case 55: /* reduce ADivTerm */
		    {
			ArrayList list = new55();
			push(goTo(26), list);
		    }
		    break;
                    case 56: /* reduce AModTerm */
		    {
			ArrayList list = new56();
			push(goTo(26), list);
		    }
		    break;
                    case 57: /* reduce AAnumberfact1Fact */
		    {
			ArrayList list = new57();
			push(goTo(27), list);
		    }
		    break;
                    case 58: /* reduce AAnumberfact2Fact */
		    {
			ArrayList list = new58();
			push(goTo(27), list);
		    }
		    break;
                    case 59: /* reduce ACharFact */
		    {
			ArrayList list = new59();
			push(goTo(27), list);
		    }
		    break;
                    case 60: /* reduce AAfcallfact1Fact */
		    {
			ArrayList list = new60();
			push(goTo(27), list);
		    }
		    break;
                    case 61: /* reduce AAfcallfact2Fact */
		    {
			ArrayList list = new61();
			push(goTo(27), list);
		    }
		    break;
                    case 62: /* reduce AAlvalfact1Fact */
		    {
			ArrayList list = new62();
			push(goTo(27), list);
		    }
		    break;
                    case 63: /* reduce AAlvalfact2Fact */
		    {
			ArrayList list = new63();
			push(goTo(27), list);
		    }
		    break;
                    case 64: /* reduce AAparenfact1Fact */
		    {
			ArrayList list = new64();
			push(goTo(27), list);
		    }
		    break;
                    case 65: /* reduce AAparenfact2Fact */
		    {
			ArrayList list = new65();
			push(goTo(27), list);
		    }
		    break;
                    case 66: /* reduce AApositivesignlist1SignList */
		    {
			ArrayList list = new66();
			push(goTo(28), list);
		    }
		    break;
                    case 67: /* reduce AApositivesignlist2SignList */
		    {
			ArrayList list = new67();
			push(goTo(28), list);
		    }
		    break;
                    case 68: /* reduce AAnegativesignlist1SignList */
		    {
			ArrayList list = new68();
			push(goTo(28), list);
		    }
		    break;
                    case 69: /* reduce AAnegativesignlist2SignList */
		    {
			ArrayList list = new69();
			push(goTo(28), list);
		    }
		    break;
                    case 70: /* reduce APositiveSignTail */
		    {
			ArrayList list = new70();
			push(goTo(29), list);
		    }
		    break;
                    case 71: /* reduce ANegativeSignTail */
		    {
			ArrayList list = new71();
			push(goTo(29), list);
		    }
		    break;
                    case 72: /* reduce ACtermCond */
		    {
			ArrayList list = new72();
			push(goTo(30), list);
		    }
		    break;
                    case 73: /* reduce AOrCond */
		    {
			ArrayList list = new73();
			push(goTo(30), list);
		    }
		    break;
                    case 74: /* reduce ACfactCterm */
		    {
			ArrayList list = new74();
			push(goTo(31), list);
		    }
		    break;
                    case 75: /* reduce AAndCterm */
		    {
			ArrayList list = new75();
			push(goTo(31), list);
		    }
		    break;
                    case 76: /* reduce ACompCfact */
		    {
			ArrayList list = new76();
			push(goTo(32), list);
		    }
		    break;
                    case 77: /* reduce ANotCfact */
		    {
			ArrayList list = new77();
			push(goTo(32), list);
		    }
		    break;
                    case 78: /* reduce AEqComp */
		    {
			ArrayList list = new78();
			push(goTo(33), list);
		    }
		    break;
                    case 79: /* reduce ANeqComp */
		    {
			ArrayList list = new79();
			push(goTo(33), list);
		    }
		    break;
                    case 80: /* reduce ALeqComp */
		    {
			ArrayList list = new80();
			push(goTo(33), list);
		    }
		    break;
                    case 81: /* reduce AGeqComp */
		    {
			ArrayList list = new81();
			push(goTo(33), list);
		    }
		    break;
                    case 82: /* reduce ALtComp */
		    {
			ArrayList list = new82();
			push(goTo(33), list);
		    }
		    break;
                    case 83: /* reduce AGtComp */
		    {
			ArrayList list = new83();
			push(goTo(33), list);
		    }
		    break;
                    case 84: /* reduce ACparenComp */
		    {
			ArrayList list = new84();
			push(goTo(33), list);
		    }
		    break;
                    case 85: /* reduce AAblock1Block */
		    {
			ArrayList list = new85();
			push(goTo(34), list);
		    }
		    break;
                    case 86: /* reduce AAblock2Block */
		    {
			ArrayList list = new86();
			push(goTo(34), list);
		    }
		    break;
                    case 87: /* reduce ANoop */
		    {
			ArrayList list = new87();
			push(goTo(35), list);
		    }
		    break;
                    case 88: /* reduce AAssignment */
		    {
			ArrayList list = new88();
			push(goTo(36), list);
		    }
		    break;
                    case 89: /* reduce AAreturnstmt1ReturnStmt */
		    {
			ArrayList list = new89();
			push(goTo(37), list);
		    }
		    break;
                    case 90: /* reduce AAreturnstmt2ReturnStmt */
		    {
			ArrayList list = new90();
			push(goTo(37), list);
		    }
		    break;
                    case 91: /* reduce ANoopStmt */
		    {
			ArrayList list = new91();
			push(goTo(38), list);
		    }
		    break;
                    case 92: /* reduce AAssignmentStmt */
		    {
			ArrayList list = new92();
			push(goTo(38), list);
		    }
		    break;
                    case 93: /* reduce ABlockStmt */
		    {
			ArrayList list = new93();
			push(goTo(38), list);
		    }
		    break;
                    case 94: /* reduce AFcallStmt */
		    {
			ArrayList list = new94();
			push(goTo(38), list);
		    }
		    break;
                    case 95: /* reduce AIfStmt */
		    {
			ArrayList list = new95();
			push(goTo(38), list);
		    }
		    break;
                    case 96: /* reduce AWhileStmt */
		    {
			ArrayList list = new96();
			push(goTo(38), list);
		    }
		    break;
                    case 97: /* reduce AReturnStmtStmt */
		    {
			ArrayList list = new97();
			push(goTo(38), list);
		    }
		    break;
                    case 98: /* reduce ANoElseIfStmt */
		    {
			ArrayList list = new98();
			push(goTo(39), list);
		    }
		    break;
                    case 99: /* reduce AElseIfStmt */
		    {
			ArrayList list = new99();
			push(goTo(39), list);
		    }
		    break;
                    case 100: /* reduce AThenStmt */
		    {
			ArrayList list = new100();
			push(goTo(40), list);
		    }
		    break;
                    case 101: /* reduce AThenStmtWelse */
		    {
			ArrayList list = new101();
			push(goTo(41), list);
		    }
		    break;
                    case 102: /* reduce AElseStmt */
		    {
			ArrayList list = new102();
			push(goTo(42), list);
		    }
		    break;
                    case 103: /* reduce ANoopStmtWithElse */
		    {
			ArrayList list = new103();
			push(goTo(43), list);
		    }
		    break;
                    case 104: /* reduce AAssignmentStmtWithElse */
		    {
			ArrayList list = new104();
			push(goTo(43), list);
		    }
		    break;
                    case 105: /* reduce ABlockStmtWithElse */
		    {
			ArrayList list = new105();
			push(goTo(43), list);
		    }
		    break;
                    case 106: /* reduce AFcallStmtWithElse */
		    {
			ArrayList list = new106();
			push(goTo(43), list);
		    }
		    break;
                    case 107: /* reduce AIfStmtWithElse */
		    {
			ArrayList list = new107();
			push(goTo(43), list);
		    }
		    break;
                    case 108: /* reduce AWhileStmtWithElse */
		    {
			ArrayList list = new108();
			push(goTo(43), list);
		    }
		    break;
                    case 109: /* reduce AReturnStmtWithElse */
		    {
			ArrayList list = new109();
			push(goTo(43), list);
		    }
		    break;
                    case 110: /* reduce AIfElseStmt */
		    {
			ArrayList list = new110();
			push(goTo(44), list);
		    }
		    break;
                    case 111: /* reduce AElseStmtWithElse */
		    {
			ArrayList list = new111();
			push(goTo(45), list);
		    }
		    break;
                    case 112: /* reduce ANoElseWhileStmt */
		    {
			ArrayList list = new112();
			push(goTo(46), list);
		    }
		    break;
                    case 113: /* reduce AWhileElseWhileWithElse */
		    {
			ArrayList list = new113();
			push(goTo(47), list);
		    }
		    break;
                    case 114: /* reduce ADoStmt */
		    {
			ArrayList list = new114();
			push(goTo(48), list);
		    }
		    break;
                    case 115: /* reduce ADoStmtWelse */
		    {
			ArrayList list = new115();
			push(goTo(49), list);
		    }
		    break;
                    case 116: /* reduce ATerminal$ArrayBrackTail */
		    {
			ArrayList list = new116();
			push(goTo(50), list);
		    }
		    break;
                    case 117: /* reduce ANonTerminal$ArrayBrackTail */
		    {
			ArrayList list = new117();
			push(goTo(50), list);
		    }
		    break;
                    case 118: /* reduce ATerminal$IdListTail */
		    {
			ArrayList list = new118();
			push(goTo(51), list);
		    }
		    break;
                    case 119: /* reduce ANonTerminal$IdListTail */
		    {
			ArrayList list = new119();
			push(goTo(51), list);
		    }
		    break;
                    case 120: /* reduce ATerminal$ParListTail */
		    {
			ArrayList list = new120();
			push(goTo(52), list);
		    }
		    break;
                    case 121: /* reduce ANonTerminal$ParListTail */
		    {
			ArrayList list = new121();
			push(goTo(52), list);
		    }
		    break;
                    case 122: /* reduce ATerminal$LocalDefTail */
		    {
			ArrayList list = new122();
			push(goTo(53), list);
		    }
		    break;
                    case 123: /* reduce ANonTerminal$LocalDefTail */
		    {
			ArrayList list = new123();
			push(goTo(53), list);
		    }
		    break;
                    case 124: /* reduce ATerminal$ExprTail */
		    {
			ArrayList list = new124();
			push(goTo(54), list);
		    }
		    break;
                    case 125: /* reduce ANonTerminal$ExprTail */
		    {
			ArrayList list = new125();
			push(goTo(54), list);
		    }
		    break;
                    case 126: /* reduce ATerminal$LvalueExprTail */
		    {
			ArrayList list = new126();
			push(goTo(55), list);
		    }
		    break;
                    case 127: /* reduce ANonTerminal$LvalueExprTail */
		    {
			ArrayList list = new127();
			push(goTo(55), list);
		    }
		    break;
                    case 128: /* reduce ATerminal$SignTail */
		    {
			ArrayList list = new128();
			push(goTo(56), list);
		    }
		    break;
                    case 129: /* reduce ANonTerminal$SignTail */
		    {
			ArrayList list = new129();
			push(goTo(56), list);
		    }
		    break;
                    case 130: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new130();
			push(goTo(57), list);
		    }
		    break;
                    case 131: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new131();
			push(goTo(57), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PFuncDef node1 = (PFuncDef) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        pfuncdefNode1 = (PFuncDef)nodeArrayList1.get(0);
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ACharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptypeNode1 = new ACharType(tcharNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        LinkedList listNode2 = new LinkedList();
        ptypeNode1 = (PType)nodeArrayList1.get(0);
        {
            // Block
        }
	nodeList.add(ptypeNode1);
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        LinkedList listNode3 = new LinkedList();
        ptypeNode1 = (PType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(ptypeNode1);
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ASomethingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        prettypeNode1 = new ASmthRetType(ptypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAstatfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList listNode3 = new LinkedList();
        ptypeNode1 = (PType)nodeArrayList1.get(0);
        {
            // Block
        }
	nodeList.add(ptypeNode1);
	nodeList.add(nullNode2);
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAstatfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        TLbrack tlbrackNode2;
        LinkedList listNode3 = new LinkedList();
        ptypeNode1 = (PType)nodeArrayList1.get(0);
        tlbrackNode2 = (TLbrack)nodeArrayList2.get(0);
        {
            // Block
        }
	nodeList.add(ptypeNode1);
	nodeList.add(tlbrackNode2);
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAstatfpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList listNode4 = new LinkedList();
        ptypeNode1 = (PType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(ptypeNode1);
	nodeList.add(nullNode2);
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAstatfpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        TLbrack tlbrackNode2;
        LinkedList listNode4 = new LinkedList();
        ptypeNode1 = (PType)nodeArrayList1.get(0);
        tlbrackNode2 = (TLbrack)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(ptypeNode1);
	nodeList.add(tlbrackNode2);
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AEmptyBrack */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TLbrack tlbrackNode1;
        tlbrackNode1 = (TLbrack)nodeArrayList1.get(0);
	nodeList.add(tlbrackNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAarraybracklist1ArrayBrackList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TNumber tnumberNode1;
        tnumberNode1 = (TNumber)nodeArrayList2.get(0);
	if(tnumberNode1 != null)
	{
	  listNode2.add(tnumberNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAarraybracklist2ArrayBrackList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TNumber tnumberNode1;
        LinkedList listNode2 = new LinkedList();
        tnumberNode1 = (TNumber)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(tnumberNode1 != null)
	{
	  listNode3.add(tnumberNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AArrayBrackTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TNumber tnumberNode1;
        tnumberNode1 = (TNumber)nodeArrayList2.get(0);
	nodeList.add(tnumberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AVarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(1);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvardefNode1 = new AVarDef(listNode3, ptypeNode4, listNode6);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAidlist1IdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAidlist2IdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TId tidNode1;
        LinkedList listNode2 = new LinkedList();
        tidNode1 = (TId)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(tidNode1 != null)
	{
	  listNode3.add(tidNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AIdListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList2.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TId tidNode1;
        LinkedList listNode2 = new LinkedList();
        PRetType prettypeNode3;
        tidNode1 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        prettypeNode3 = (PRetType)nodeArrayList6.get(0);
	nodeList.add(tidNode1);
	nodeList.add(listNode2);
	nodeList.add(prettypeNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TId tidNode1;
        LinkedList listNode3 = new LinkedList();
        PRetType prettypeNode4;
        tidNode1 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        prettypeNode4 = (PRetType)nodeArrayList7.get(0);
	nodeList.add(tidNode1);
	nodeList.add(listNode3);
	nodeList.add(prettypeNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAfpardeflist1FparDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPar pparNode1;
        pparNode1 = (PPar)nodeArrayList1.get(0);
	if(pparNode1 != null)
	{
	  listNode2.add(pparNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAfpardeflist2FparDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PPar pparNode1;
        LinkedList listNode2 = new LinkedList();
        pparNode1 = (PPar)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pparNode1 != null)
	{
	  listNode3.add(pparNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        TLbrack tlbrackNode6;
        LinkedList listNode8 = new LinkedList();
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList3.get(0);
        tlbrackNode6 = (TLbrack)nodeArrayList3.get(1);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList3.get(2);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pparNode1 = new APar(null, listNode4, ptypeNode5, tlbrackNode6, listNode8);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        TRef trefNode2;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        TLbrack tlbrackNode6;
        LinkedList listNode8 = new LinkedList();
        trefNode2 = (TRef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tlbrackNode6 = (TLbrack)nodeArrayList4.get(1);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList4.get(2);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pparNode1 = new APar(trefNode2, listNode4, ptypeNode5, tlbrackNode6, listNode8);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AParListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPar pparNode1;
        pparNode1 = (PPar)nodeArrayList2.get(0);
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PRetType prettypeNode5;
        LinkedList listNode6 = new LinkedList();
        PBlock pblockNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(1);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        prettypeNode5 = (PRetType)nodeArrayList1.get(2);
        {
            // Block
        }
        pblockNode7 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(tidNode2, listNode4, prettypeNode5, listNode6, pblockNode7);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PRetType prettypeNode5;
        LinkedList listNode7 = new LinkedList();
        PBlock pblockNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(1);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        prettypeNode5 = (PRetType)nodeArrayList1.get(2);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList2.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        pblockNode8 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(tidNode2, listNode4, prettypeNode5, listNode7, pblockNode8);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PRetType prettypeNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(1);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        prettypeNode5 = (PRetType)nodeArrayList1.get(2);

        pfuncdeclNode1 = new AFuncDecl(tidNode2, listNode4, prettypeNode5);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAfdeflocaldeflist1LocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdefLocalDef(pfuncdefNode2);
        }
	if(plocaldefNode1 != null)
	{
	  listNode3.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAfdeflocaldeflist2LocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdefLocalDef(pfuncdefNode2);
        }
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode4.add(plocaldefNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAfdeclocaldeflist1LocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdeclLocalDef(pfuncdeclNode2);
        }
	if(plocaldefNode1 != null)
	{
	  listNode3.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAfdeclocaldeflist2LocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdeclLocalDef(pfuncdeclNode2);
        }
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode4.add(plocaldefNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAvardeflocaldeflist1LocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVdefLocalDef(pvardefNode2);
        }
	if(plocaldefNode1 != null)
	{
	  listNode3.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAvardeflocaldeflist2LocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVdefLocalDef(pvardefNode2);
        }
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode4.add(plocaldefNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AFdefLocalDefTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AFdecLocalDefTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFdeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AVdefLocalDefTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVdefLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunccallNode1 = new AFuncCall(tidNode2, listNode3);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunccallNode1 = new AFuncCall(tidNode2, listNode4);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAexprlist1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAexprlist2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        LinkedList listNode2 = new LinkedList();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAidlvalue1Lvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        plvalueNode1 = new AIdLvalue(tidNode2, listNode3);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AAidlvalue2Lvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plvalueNode1 = new AIdLvalue(tidNode2, listNode4);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAstringlvalue1Lvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TString tstringNode2;
        LinkedList listNode3 = new LinkedList();
        tstringNode2 = (TString)nodeArrayList1.get(0);
        {
            // Block
        }

        plvalueNode1 = new AStringLvalue(tstringNode2, listNode3);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAstringlvalue2Lvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TString tstringNode2;
        LinkedList listNode4 = new LinkedList();
        tstringNode2 = (TString)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plvalueNode1 = new AStringLvalue(tstringNode2, listNode4);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAlvalueexprlist1LvalueExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAlvalueexprlist2LvalueExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        LinkedList listNode2 = new LinkedList();
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ALvalueExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ASubExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASubExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AFactTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AAnumberfact1Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        TNumber tnumberNode3;
        {
            // Block
        }
        tnumberNode3 = (TNumber)nodeArrayList1.get(0);

        pexprNode1 = new ANumberExpr(listNode2, tnumberNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAnumberfact2Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        TNumber tnumberNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);

        pexprNode1 = new ANumberExpr(listNode3, tnumberNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ACharFact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TSingleChar tsinglecharNode2;
        tsinglecharNode2 = (TSingleChar)nodeArrayList1.get(0);

        pexprNode1 = new ACharExpr(tsinglecharNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAfcallfact1Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PFuncCall pfunccallNode3;
        {
            // Block
        }
        pfunccallNode3 = (PFuncCall)nodeArrayList1.get(0);

        pexprNode1 = new AFcallExpr(listNode2, pfunccallNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAfcallfact2Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PFuncCall pfunccallNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunccallNode4 = (PFuncCall)nodeArrayList2.get(0);

        pexprNode1 = new AFcallExpr(listNode3, pfunccallNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAlvalfact1Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PLvalue plvalueNode3;
        {
            // Block
        }
        plvalueNode3 = (PLvalue)nodeArrayList1.get(0);

        pexprNode1 = new ALvalueExpr(listNode2, plvalueNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AAlvalfact2Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PLvalue plvalueNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        plvalueNode4 = (PLvalue)nodeArrayList2.get(0);

        pexprNode1 = new ALvalueExpr(listNode3, plvalueNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AAparenfact1Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PExpr pexprNode3;
        {
            // Block
        }
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ASignedExpr(listNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AAparenfact2Fact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PExpr pexprNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASignedExpr(listNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AApositivesignlist1SignList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PSign psignNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psignNode1 = new APositiveSign(tplusNode2);
        }
	if(psignNode1 != null)
	{
	  listNode3.add(psignNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AApositivesignlist2SignList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PSign psignNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psignNode1 = new APositiveSign(tplusNode2);
        }
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(psignNode1 != null)
	{
	  listNode4.add(psignNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AAnegativesignlist1SignList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PSign psignNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psignNode1 = new ANegativeSign(tminusNode2);
        }
	if(psignNode1 != null)
	{
	  listNode3.add(psignNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AAnegativesignlist2SignList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PSign psignNode1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psignNode1 = new ANegativeSign(tminusNode2);
        }
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(psignNode1 != null)
	{
	  listNode4.add(psignNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce APositiveSignTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psignNode1 = new APositiveSign(tplusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ANegativeSignTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psignNode1 = new ANegativeSign(tminusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ACtermCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AOrCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        PCond pcondNode3;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList3.get(0);

        pcondNode1 = new AOrCond(pcondNode2, pcondNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ACfactCterm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AAndCterm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        PCond pcondNode3;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList3.get(0);

        pcondNode1 = new AAndCond(pcondNode2, pcondNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ACompCfact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ANotCfact */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        pcondNode2 = (PCond)nodeArrayList2.get(0);

        pcondNode1 = new ANotCond(pcondNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AEqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pcondNode1 = new AEqCond(pexprNode2, pexprNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ANeqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pcondNode1 = new ANeqCond(pexprNode2, pexprNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ALeqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pcondNode1 = new ALeqCond(pexprNode2, pexprNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AGeqComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pcondNode1 = new AGeqCond(pexprNode2, pexprNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ALtComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pcondNode1 = new ALtCond(pexprNode2, pexprNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AGtComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pcondNode1 = new AGtCond(pexprNode2, pexprNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce ACparenComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pblockNode1 = new ABlock(listNode2);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pblockNode1 = new ABlock(listNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ANoop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TSemicolon tsemicolonNode1;
        tsemicolonNode1 = (TSemicolon)nodeArrayList1.get(0);
	nodeList.add(tsemicolonNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        PExpr pexprNode2;
        plvalueNode1 = (PLvalue)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
	nodeList.add(plvalueNode1);
	nodeList.add(pexprNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AAreturnstmt1ReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        @SuppressWarnings("unused") Object nullNode1 = null;
	nodeList.add(nullNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AAreturnstmt2ReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ANoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstatementNode1 = new ANoopStatement(tsemicolonNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce AAssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLvalue plvalueNode2;
        PExpr pexprNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList1.get(1);

        pstatementNode1 = new AAssignmentStatement(plvalueNode2, pexprNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AFcallStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFcallStatement(pfunccallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCond pcondNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList1.get(1);
        pstatementNode4 = (PStatement)nodeArrayList1.get(2);

        pstatementNode1 = new AIfElseStatement(pcondNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCond pcondNode2;
        PStatement pstatementNode3;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList1.get(1);

        pstatementNode1 = new AWhileStatement(pcondNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce AReturnStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pstatementNode1 = new AReturnStatement(pexprNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ANoElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        PStatement pstatementNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
        pstatementNode2 = (PStatement)nodeArrayList3.get(0);
	nodeList.add(pcondNode1);
	nodeList.add(pstatementNode2);
	nodeList.add(nullNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce AElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        PStatement pstatementNode2;
        PStatement pstatementNode3;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
        pstatementNode2 = (PStatement)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);
	nodeList.add(pcondNode1);
	nodeList.add(pstatementNode2);
	nodeList.add(pstatementNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce AThenStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList2.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce AThenStmtWelse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList2.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce AElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList2.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce ANoopStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstatementNode1 = new ANoopStatement(tsemicolonNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce AAssignmentStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLvalue plvalueNode2;
        PExpr pexprNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList1.get(1);

        pstatementNode1 = new AAssignmentStatement(plvalueNode2, pexprNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce AFcallStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFcallStatement(pfunccallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce AIfStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCond pcondNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList1.get(1);
        pstatementNode4 = (PStatement)nodeArrayList1.get(2);

        pstatementNode1 = new AIfElseStatement(pcondNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce AWhileStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCond pcondNode2;
        PStatement pstatementNode3;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList1.get(1);

        pstatementNode1 = new AWhileStatement(pcondNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce AReturnStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pstatementNode1 = new AReturnStatement(pexprNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce AIfElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        PStatement pstatementNode2;
        PStatement pstatementNode3;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
        pstatementNode2 = (PStatement)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);
	nodeList.add(pcondNode1);
	nodeList.add(pstatementNode2);
	nodeList.add(pstatementNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce AElseStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList2.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ANoElseWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        PStatement pstatementNode2;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
        pstatementNode2 = (PStatement)nodeArrayList3.get(0);
	nodeList.add(pcondNode1);
	nodeList.add(pstatementNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce AWhileElseWhileWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        PStatement pstatementNode2;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
        pstatementNode2 = (PStatement)nodeArrayList3.get(0);
	nodeList.add(pcondNode1);
	nodeList.add(pstatementNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce ADoStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList2.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce ADoStmtWelse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList2.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce ATerminal$ArrayBrackTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TNumber tnumberNode1;
        tnumberNode1 = (TNumber)nodeArrayList1.get(0);
	if(tnumberNode1 != null)
	{
	  listNode2.add(tnumberNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new117() /* reduce ANonTerminal$ArrayBrackTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TNumber tnumberNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnumberNode2 = (TNumber)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnumberNode2 != null)
	{
	  listNode3.add(tnumberNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new118() /* reduce ATerminal$IdListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new119() /* reduce ANonTerminal$IdListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TId tidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidNode2 = (TId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidNode2 != null)
	{
	  listNode3.add(tidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new120() /* reduce ATerminal$ParListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPar pparNode1;
        pparNode1 = (PPar)nodeArrayList1.get(0);
	if(pparNode1 != null)
	{
	  listNode2.add(pparNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new121() /* reduce ANonTerminal$ParListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPar pparNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparNode2 = (PPar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparNode2 != null)
	{
	  listNode3.add(pparNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new122() /* reduce ATerminal$LocalDefTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new123() /* reduce ANonTerminal$LocalDefTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new124() /* reduce ATerminal$ExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new125() /* reduce ANonTerminal$ExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new126() /* reduce ATerminal$LvalueExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new127() /* reduce ANonTerminal$LvalueExprTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new128() /* reduce ATerminal$SignTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSign psignNode1;
        psignNode1 = (PSign)nodeArrayList1.get(0);
	if(psignNode1 != null)
	{
	  listNode2.add(psignNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new129() /* reduce ANonTerminal$SignTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSign psignNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psignNode2 = (PSign)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psignNode2 != null)
	{
	  listNode3.add(psignNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new130() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new131() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 1}, {17, SHIFT, 5}, },
			{{-1, ERROR, 2}, {41, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {5, SHIFT, 1}, {15, SHIFT, 6}, {26, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 5}, {22, SHIFT, 14}, },
			{{-1, ERROR, 6}, {17, SHIFT, 15}, },
			{{-1, ERROR, 7}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {26, SHIFT, 7}, {27, SHIFT, 22}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 33}, {5, SHIFT, 1}, {15, SHIFT, 6}, },
			{{-1, ERROR, 9}, {5, SHIFT, 1}, {15, SHIFT, 6}, {26, SHIFT, 7}, {29, SHIFT, 39}, },
			{{-1, REDUCE, 29}, {5, SHIFT, 1}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 31}, {5, SHIFT, 1}, {15, SHIFT, 6}, },
			{{-1, ERROR, 12}, {26, SHIFT, 7}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 14}, {12, SHIFT, 43}, {17, SHIFT, 15}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 16}, {28, SHIFT, 48}, },
			{{-1, ERROR, 16}, {30, SHIFT, 51}, },
			{{-1, ERROR, 17}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 18}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {29, SHIFT, 69}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 19}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 43}, {22, SHIFT, 72}, {24, SHIFT, 73}, },
			{{-1, REDUCE, 45}, {24, SHIFT, 73}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 24}, {29, SHIFT, 76}, },
			{{-1, ERROR, 25}, {31, SHIFT, 77}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 33}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {26, SHIFT, 7}, {27, SHIFT, 78}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 34}, {5, SHIFT, 1}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 30}, {5, SHIFT, 1}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 32}, {5, SHIFT, 1}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 43}, {17, SHIFT, 15}, },
			{{-1, ERROR, 44}, {30, SHIFT, 82}, },
			{{-1, ERROR, 45}, {30, SHIFT, 83}, },
			{{-1, ERROR, 46}, {23, SHIFT, 84}, },
			{{-1, REDUCE, 21}, {29, SHIFT, 85}, },
			{{-1, ERROR, 48}, {17, SHIFT, 88}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 17}, {28, SHIFT, 48}, },
			{{-1, ERROR, 51}, {1, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, ERROR, 52}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 55}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 66}, {32, SHIFT, 97}, {33, SHIFT, 98}, },
			{{-1, REDUCE, 68}, {32, SHIFT, 97}, {33, SHIFT, 98}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 60}, {32, SHIFT, 102}, {33, SHIFT, 103}, {35, SHIFT, 104}, {36, SHIFT, 105}, {37, SHIFT, 106}, {38, SHIFT, 107}, {39, SHIFT, 108}, {40, SHIFT, 109}, },
			{{-1, REDUCE, 50}, {2, SHIFT, 110}, {8, SHIFT, 111}, {34, SHIFT, 112}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 63}, {17, SHIFT, 20}, {18, SHIFT, 113}, {21, SHIFT, 21}, {22, SHIFT, 114}, },
			{{-1, ERROR, 64}, {11, SHIFT, 117}, {14, SHIFT, 118}, },
			{{-1, REDUCE, 72}, {0, SHIFT, 121}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 68}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 70}, {29, SHIFT, 123}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, ERROR, 71}, {3, SHIFT, 124}, {11, SHIFT, 117}, },
			{{-1, ERROR, 72}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {23, SHIFT, 126}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 73}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 77}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 81}, {30, SHIFT, 131}, },
			{{-1, ERROR, 82}, {1, SHIFT, 90}, {7, SHIFT, 91}, {10, SHIFT, 132}, },
			{{-1, ERROR, 83}, {1, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, ERROR, 84}, {30, SHIFT, 137}, },
			{{-1, ERROR, 85}, {12, SHIFT, 43}, {17, SHIFT, 15}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 22}, {29, SHIFT, 85}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, {24, SHIFT, 140}, },
			{{-1, ERROR, 93}, {29, SHIFT, 142}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 95}, {23, SHIFT, 143}, {32, SHIFT, 102}, {33, SHIFT, 103}, {35, SHIFT, 104}, {36, SHIFT, 105}, {37, SHIFT, 106}, {38, SHIFT, 107}, {39, SHIFT, 108}, {40, SHIFT, 109}, },
			{{-1, ERROR, 96}, {11, SHIFT, 117}, {23, SHIFT, 144}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 67}, {32, SHIFT, 97}, {33, SHIFT, 98}, },
			{{-1, REDUCE, 69}, {32, SHIFT, 97}, {33, SHIFT, 98}, },
			{{-1, ERROR, 102}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 103}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 104}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 105}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 106}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 107}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 108}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 109}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 110}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 111}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 112}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 114}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 117}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 118}, {6, SHIFT, 159}, {13, SHIFT, 18}, {16, SHIFT, 160}, {17, SHIFT, 20}, {21, SHIFT, 21}, {26, SHIFT, 7}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 120}, {4, SHIFT, 170}, },
			{{-1, ERROR, 121}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 122}, {23, SHIFT, 143}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 124}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {26, SHIFT, 7}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 127}, {23, SHIFT, 174}, },
			{{-1, REDUCE, 40}, {28, SHIFT, 175}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, ERROR, 129}, {25, SHIFT, 178}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, ERROR, 130}, {29, SHIFT, 179}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, ERROR, 131}, {1, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 7}, {24, SHIFT, 181}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 137}, {1, SHIFT, 90}, {7, SHIFT, 91}, {10, SHIFT, 132}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 140}, {18, SHIFT, 185}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 51}, {2, SHIFT, 110}, {8, SHIFT, 111}, {34, SHIFT, 112}, },
			{{-1, REDUCE, 52}, {2, SHIFT, 110}, {8, SHIFT, 111}, {34, SHIFT, 112}, },
			{{-1, REDUCE, 78}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 79}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 80}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 81}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 82}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 83}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 157}, {23, SHIFT, 186}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 73}, {0, SHIFT, 121}, },
			{{-1, ERROR, 159}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 160}, {9, SHIFT, 52}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 55}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, ERROR, 161}, {29, SHIFT, 189}, },
			{{-1, REDUCE, 93}, {4, REDUCE, 105}, },
			{{-1, REDUCE, 91}, {4, REDUCE, 103}, },
			{{-1, REDUCE, 92}, {4, REDUCE, 104}, },
			{{-1, REDUCE, 97}, {4, REDUCE, 109}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 170}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {26, SHIFT, 7}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 175}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 41}, {28, SHIFT, 175}, },
			{{-1, REDUCE, 47}, {24, SHIFT, 193}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 181}, {18, SHIFT, 185}, {25, SHIFT, 196}, },
			{{-1, REDUCE, 8}, {24, SHIFT, 140}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 185}, {25, SHIFT, 198}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 187}, {11, SHIFT, 117}, {14, SHIFT, 118}, },
			{{-1, ERROR, 188}, {3, SHIFT, 200}, {11, SHIFT, 117}, },
			{{-1, REDUCE, 94}, {4, REDUCE, 106}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 42}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 193}, {17, SHIFT, 20}, {18, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 21}, {22, SHIFT, 68}, {32, SHIFT, 56}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 48}, {24, SHIFT, 193}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, {24, SHIFT, 204}, },
			{{-1, ERROR, 199}, {4, SHIFT, 207}, },
			{{-1, ERROR, 200}, {6, SHIFT, 159}, {13, SHIFT, 18}, {16, SHIFT, 160}, {17, SHIFT, 20}, {21, SHIFT, 21}, {26, SHIFT, 7}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 202}, {25, SHIFT, 210}, {32, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 127}, },
			{{-1, ERROR, 204}, {18, SHIFT, 211}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 13}, {24, SHIFT, 204}, },
			{{-1, ERROR, 207}, {6, SHIFT, 159}, {13, SHIFT, 18}, {16, SHIFT, 160}, {17, SHIFT, 20}, {21, SHIFT, 21}, {26, SHIFT, 7}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 211}, {25, SHIFT, 214}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 14}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 135}, {51, 92}, {82, 133}, {137, 133}, },
			{{-1, 93}, },
			{{-1, 134}, {137, 184}, },
			{{-1, 136}, {131, 180}, },
			{{-1, 182}, },
			{{-1, 141}, {135, 183}, {182, 197}, },
			{{-1, 205}, {206, 212}, },
			{{-1, 34}, {3, 8}, {9, 8}, },
			{{-1, 45}, {6, 16}, {43, 81}, },
			{{-1, 49}, {50, 89}, },
			{{-1, 9}, {0, 3}, },
			{{-1, 46}, },
			{{-1, 47}, {85, 138}, },
			{{-1, 86}, {87, 139}, },
			{{-1, 35}, {0, 4}, {3, 10}, {9, 10}, },
			{{-1, 36}, {3, 11}, {9, 11}, },
			{{-1, 12}, },
			{{-1, 37}, {38, 80}, {40, 80}, {41, 80}, },
			{{-1, 58}, {7, 24}, {33, 24}, {63, 115}, {118, 161}, {124, 24}, {170, 24}, {200, 161}, {207, 161}, },
			{{-1, 127}, },
			{{-1, 176}, {177, 192}, },
			{{-1, 59}, {7, 25}, {33, 25}, {63, 116}, {118, 25}, {124, 25}, {170, 25}, {200, 25}, {207, 25}, },
			{{-1, 74}, {21, 75}, },
			{{-1, 194}, {195, 203}, },
			{{-1, 60}, {18, 70}, {55, 95}, {68, 122}, {72, 128}, {73, 129}, {77, 130}, {104, 148}, {105, 149}, {106, 150}, {107, 151}, {108, 152}, {109, 153}, {114, 157}, {175, 191}, {193, 202}, },
			{{-1, 61}, {102, 146}, {103, 147}, },
			{{-1, 62}, {110, 154}, {111, 155}, {112, 156}, },
			{{-1, 63}, },
			{{-1, 99}, {100, 145}, {101, 145}, },
			{{-1, 64}, {19, 71}, {55, 96}, {159, 187}, {160, 188}, },
			{{-1, 65}, {117, 158}, },
			{{-1, 66}, {52, 94}, {121, 172}, },
			{{-1, 67}, },
			{{-1, 26}, {3, 13}, {9, 13}, {12, 42}, {118, 162}, {200, 162}, {207, 162}, },
			{{-1, 27}, {118, 163}, {200, 163}, {207, 163}, },
			{{-1, 28}, {118, 164}, {200, 164}, {207, 164}, },
			{{-1, 29}, {118, 165}, {200, 165}, {207, 165}, },
			{{-1, 173}, {7, 30}, {33, 79}, {118, 166}, {170, 190}, {207, 190}, },
			{{-1, 31}, },
			{{-1, 119}, },
			{{-1, 120}, {187, 199}, },
			{{-1, 171}, },
			{{-1, 167}, {200, 209}, {207, 213}, },
			{{-1, 168}, },
			{{-1, 208}, },
			{{-1, 32}, },
			{{-1, 169}, },
			{{-1, 125}, },
			{{-1, 201}, },
			{{-1, 206}, },
			{{-1, 50}, },
			{{-1, 87}, },
			{{-1, 38}, {10, 40}, {11, 41}, },
			{{-1, 177}, },
			{{-1, 195}, },
			{{-1, 100}, {57, 101}, },
			{{-1, 33}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: 'if', 'return', 'while', id, string, '{', '}', ';'",
			"expecting: 'fun', 'var', '{', ';'",
			"expecting: '{'",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref', id, ')'",
			"expecting: ',', ':'",
			"expecting: ':'",
			"expecting: 'not', id, number, single char, string, '(', '+', '-'",
			"expecting: id, number, single char, string, '(', ';', '+', '-'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '(', ')', '[', ']', ',', ';', '<-', '+', '-', '*', '=', '#', '<=', '>=', '<', '>'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', ')', '[', ']', ',', ';', '<-', '+', '-', '*', '=', '#', '<=', '>=', '<', '>'",
			"expecting: 'else', 'fun', 'if', 'return', 'var', 'while', id, string, '{', '}', ';', EOF",
			"expecting: 'else', 'if', 'return', 'while', id, string, '{', '}', ';'",
			"expecting: ';'",
			"expecting: '<-'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: 'char', 'int'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', ')', ']', ',', ';', '+', '-', '*', '=', '#', '<=', '>=', '<', '>'",
			"expecting: id, number, string, '(', '+', '-'",
			"expecting: '+', '-', '=', '#', '<=', '>=', '<', '>'",
			"expecting: id, number, string, '('",
			"expecting: 'or', 'then'",
			"expecting: 'and', 'do', 'or', 'then', ')'",
			"expecting: id, number, single char, string, '(', '+', '-'",
			"expecting: ';', '+', '-'",
			"expecting: 'do', 'or'",
			"expecting: id, number, single char, string, '(', ')', '+', '-'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', ')', ']', ',', ';', '<-', '+', '-', '*', '=', '#', '<=', '>=', '<', '>'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'ref', id",
			"expecting: 'fun', 'var', ')', '[', '{', ';'",
			"expecting: '[', ';'",
			"expecting: ')', '+', '-', '=', '#', '<=', '>=', '<', '>'",
			"expecting: 'or', ')'",
			"expecting: 'if', 'return', 'while', id, string, '{', ';'",
			"expecting: 'else'",
			"expecting: ')', '+', '-'",
			"expecting: ')', ',', '+', '-'",
			"expecting: ']', '+', '-'",
			"expecting: ')', '[', ';'",
			"expecting: number",
			"expecting: 'and', 'do', 'or', 'then', ')', '+', '-'",
			"expecting: ')', ','",
			"expecting: number, ']'",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 2, 4, 1, 5, 3, 6, 3, 3, 7, 8, 9, 10, 11, 12, 13, 12, 14, 15, 16, 17, 18, 19, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 8, 1, 11, 11, 20, 21, 1, 10, 10, 22, 12, 23, 23, 12, 24, 24, 23, 23, 25, 23, 23, 26, 27, 28, 28, 28, 29, 17, 30, 31, 32, 29, 33, 33, 5, 29, 16, 5, 3, 11, 34, 22, 11, 35, 21, 21, 10, 10, 36, 36, 37, 18, 28, 38, 39, 24, 24, 24, 24, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 23, 29, 23, 23, 12, 40, 5, 41, 12, 42, 17, 40, 5, 23, 20, 43, 44, 30, 22, 6, 6, 6, 45, 21, 34, 21, 21, 46, 18, 3, 23, 28, 24, 23, 23, 47, 47, 47, 47, 47, 47, 23, 23, 23, 42, 28, 12, 12, 18, 17, 17, 17, 17, 5, 41, 41, 41, 40, 5, 28, 5, 23, 29, 48, 48, 15, 17, 21, 49, 45, 21, 6, 50, 23, 27, 31, 17, 5, 43, 48, 29, 15, 15, 45, 21, 45, 41, 40, 41, 44, 15, 46, 45, 45, 40, 41, 41, 15, 50, 45, 41, 45, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
