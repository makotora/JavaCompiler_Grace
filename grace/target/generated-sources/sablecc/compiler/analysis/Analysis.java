/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAFuncDef(AFuncDef node);
    void caseASmthRetType(ASmthRetType node);
    void caseANothingRetType(ANothingRetType node);
    void caseAIntType(AIntType node);
    void caseACharType(ACharType node);
    void caseAPar(APar node);
    void caseAFdefLocalDef(AFdefLocalDef node);
    void caseAFdeclLocalDef(AFdeclLocalDef node);
    void caseAVdefLocalDef(AVdefLocalDef node);
    void caseAFuncDecl(AFuncDecl node);
    void caseAVarDef(AVarDef node);
    void caseABlock(ABlock node);
    void caseAFuncCall(AFuncCall node);
    void caseAIdLvalue(AIdLvalue node);
    void caseAStringLvalue(AStringLvalue node);
    void caseANoopStatement(ANoopStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseAFcallStatement(AFcallStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAAddExpr(AAddExpr node);
    void caseASubExpr(ASubExpr node);
    void caseAMultExpr(AMultExpr node);
    void caseADivExpr(ADivExpr node);
    void caseAModExpr(AModExpr node);
    void caseANumberExpr(ANumberExpr node);
    void caseACharExpr(ACharExpr node);
    void caseAFcallExpr(AFcallExpr node);
    void caseALvalueExpr(ALvalueExpr node);
    void caseASignedExpr(ASignedExpr node);
    void caseAPositiveSign(APositiveSign node);
    void caseANegativeSign(ANegativeSign node);
    void caseAOrCond(AOrCond node);
    void caseAAndCond(AAndCond node);
    void caseANotCond(ANotCond node);
    void caseAEqCond(AEqCond node);
    void caseANeqCond(ANeqCond node);
    void caseALeqCond(ALeqCond node);
    void caseAGeqCond(AGeqCond node);
    void caseALtCond(ALtCond node);
    void caseAGtCond(AGtCond node);

    void caseTAnd(TAnd node);
    void caseTChar(TChar node);
    void caseTDiv(TDiv node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFun(TFun node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTMod(TMod node);
    void caseTNot(TNot node);
    void caseTNothing(TNothing node);
    void caseTOr(TOr node);
    void caseTRef(TRef node);
    void caseTReturn(TReturn node);
    void caseTThen(TThen node);
    void caseTVar(TVar node);
    void caseTWhile(TWhile node);
    void caseTComment(TComment node);
    void caseTSimpleCom(TSimpleCom node);
    void caseTId(TId node);
    void caseTNumber(TNumber node);
    void caseTErrorNumber(TErrorNumber node);
    void caseTSingleChar(TSingleChar node);
    void caseTString(TString node);
    void caseTWhitespace(TWhitespace node);
    void caseTLpar(TLpar node);
    void caseTRpar(TRpar node);
    void caseTLbrack(TLbrack node);
    void caseTRbrack(TRbrack node);
    void caseTLbrace(TLbrace node);
    void caseTRbrace(TRbrace node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLeq(TLeq node);
    void caseTGeq(TGeq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseEOF(EOF node);
}
