/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAIntDataType(AIntDataType node)
    {
        defaultIn(node);
    }

    public void outAIntDataType(AIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntDataType(node);
    }

    public void inACharDataType(ACharDataType node)
    {
        defaultIn(node);
    }

    public void outACharDataType(ACharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharDataType(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        {
            List<PArrayBrack> copy = new ArrayList<PArrayBrack>(node.getArrayBrack());
            for(PArrayBrack e : copy)
            {
                e.apply(this);
            }
        }
        outAType(node);
    }

    public void inASomethingRetType(ASomethingRetType node)
    {
        defaultIn(node);
    }

    public void outASomethingRetType(ASomethingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomethingRetType(ASomethingRetType node)
    {
        inASomethingRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outASomethingRetType(node);
    }

    public void inANothingRetType(ANothingRetType node)
    {
        defaultIn(node);
    }

    public void outANothingRetType(ANothingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        inANothingRetType(node);
        if(node.getNothing() != null)
        {
            node.getNothing().apply(this);
        }
        outANothingRetType(node);
    }

    public void inAStatFparType(AStatFparType node)
    {
        defaultIn(node);
    }

    public void outAStatFparType(AStatFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatFparType(AStatFparType node)
    {
        inAStatFparType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getEmptyBrack() != null)
        {
            node.getEmptyBrack().apply(this);
        }
        {
            List<PArrayBrack> copy = new ArrayList<PArrayBrack>(node.getArrayBrack());
            for(PArrayBrack e : copy)
            {
                e.apply(this);
            }
        }
        outAStatFparType(node);
    }

    public void inAEmptyBrack(AEmptyBrack node)
    {
        defaultIn(node);
    }

    public void outAEmptyBrack(AEmptyBrack node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyBrack(AEmptyBrack node)
    {
        inAEmptyBrack(node);
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        outAEmptyBrack(node);
    }

    public void inAArrayBrack(AArrayBrack node)
    {
        defaultIn(node);
    }

    public void outAArrayBrack(AArrayBrack node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayBrack(AArrayBrack node)
    {
        inAArrayBrack(node);
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        outAArrayBrack(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDef(node);
    }

    public void inAIdList(AIdList node)
    {
        defaultIn(node);
    }

    public void outAIdList(AIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdList(AIdList node)
    {
        inAIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PIdListTail> copy = new ArrayList<PIdListTail>(node.getIdListTail());
            for(PIdListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAIdList(node);
    }

    public void inAIdListTail(AIdListTail node)
    {
        defaultIn(node);
    }

    public void outAIdListTail(AIdListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdListTail(AIdListTail node)
    {
        inAIdListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdListTail(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getFparDefList() != null)
        {
            node.getFparDefList().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAHeader(node);
    }

    public void inAFparDefList(AFparDefList node)
    {
        defaultIn(node);
    }

    public void outAFparDefList(AFparDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDefList(AFparDefList node)
    {
        inAFparDefList(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        {
            List<PParListTail> copy = new ArrayList<PParListTail>(node.getParListTail());
            for(PParListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAFparDefList(node);
    }

    public void inAFparDef(AFparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef(AFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef(AFparDef node)
    {
        inAFparDef(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        outAFparDef(node);
    }

    public void inAParListTail(AParListTail node)
    {
        defaultIn(node);
    }

    public void outAParListTail(AParListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParListTail(AParListTail node)
    {
        inAParListTail(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAParListTail(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAFdefLocalDef(AFdefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFdefLocalDef(AFdefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFdefLocalDef(AFdefLocalDef node)
    {
        inAFdefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFdefLocalDef(node);
    }

    public void inAFdecLocalDef(AFdecLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFdecLocalDef(AFdecLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFdecLocalDef(AFdecLocalDef node)
    {
        inAFdecLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFdecLocalDef(node);
    }

    public void inAVdefLocalDef(AVdefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVdefLocalDef(AVdefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVdefLocalDef(AVdefLocalDef node)
    {
        inAVdefLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVdefLocalDef(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAExprList(AExprList node)
    {
        defaultIn(node);
    }

    public void outAExprList(AExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprList(AExprList node)
    {
        inAExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PExprTail> copy = new ArrayList<PExprTail>(node.getExprTail());
            for(PExprTail e : copy)
            {
                e.apply(this);
            }
        }
        outAExprList(node);
    }

    public void inAExprTail(AExprTail node)
    {
        defaultIn(node);
    }

    public void outAExprTail(AExprTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTail(AExprTail node)
    {
        inAExprTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprTail(node);
    }

    public void inAIdLvalue(AIdLvalue node)
    {
        defaultIn(node);
    }

    public void outAIdLvalue(AIdLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLvalue(AIdLvalue node)
    {
        inAIdLvalue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdLvalue(node);
    }

    public void inAStringLvalue(AStringLvalue node)
    {
        defaultIn(node);
    }

    public void outAStringLvalue(AStringLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLvalue(AStringLvalue node)
    {
        inAStringLvalue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringLvalue(node);
    }

    public void inALvalueLvalue(ALvalueLvalue node)
    {
        defaultIn(node);
    }

    public void outALvalueLvalue(ALvalueLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalueLvalue(ALvalueLvalue node)
    {
        inALvalueLvalue(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        outALvalueLvalue(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inAPositiveExpr(APositiveExpr node)
    {
        defaultIn(node);
    }

    public void outAPositiveExpr(APositiveExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPositiveExpr(APositiveExpr node)
    {
        inAPositiveExpr(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAPositiveExpr(node);
    }

    public void inANegativeExpr(ANegativeExpr node)
    {
        defaultIn(node);
    }

    public void outANegativeExpr(ANegativeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeExpr(ANegativeExpr node)
    {
        inANegativeExpr(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outANegativeExpr(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASubExpr(node);
    }

    public void inAFactTerm(AFactTerm node)
    {
        defaultIn(node);
    }

    public void outAFactTerm(AFactTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactTerm(AFactTerm node)
    {
        inAFactTerm(node);
        if(node.getFact() != null)
        {
            node.getFact().apply(this);
        }
        outAFactTerm(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFact() != null)
        {
            node.getFact().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFact() != null)
        {
            node.getFact().apply(this);
        }
        outADivTerm(node);
    }

    public void inAModTerm(AModTerm node)
    {
        defaultIn(node);
    }

    public void outAModTerm(AModTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        inAModTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFact() != null)
        {
            node.getFact().apply(this);
        }
        outAModTerm(node);
    }

    public void inANumberFact(ANumberFact node)
    {
        defaultIn(node);
    }

    public void outANumberFact(ANumberFact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberFact(ANumberFact node)
    {
        inANumberFact(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberFact(node);
    }

    public void inACharFact(ACharFact node)
    {
        defaultIn(node);
    }

    public void outACharFact(ACharFact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharFact(ACharFact node)
    {
        inACharFact(node);
        if(node.getSingleChar() != null)
        {
            node.getSingleChar().apply(this);
        }
        outACharFact(node);
    }

    public void inAFcallFact(AFcallFact node)
    {
        defaultIn(node);
    }

    public void outAFcallFact(AFcallFact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFcallFact(AFcallFact node)
    {
        inAFcallFact(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFcallFact(node);
    }

    public void inALvalFact(ALvalFact node)
    {
        defaultIn(node);
    }

    public void outALvalFact(ALvalFact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalFact(ALvalFact node)
    {
        inALvalFact(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        outALvalFact(node);
    }

    public void inAParenFact(AParenFact node)
    {
        defaultIn(node);
    }

    public void outAParenFact(AParenFact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenFact(AParenFact node)
    {
        inAParenFact(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAParenFact(node);
    }

    public void inACtermCond(ACtermCond node)
    {
        defaultIn(node);
    }

    public void outACtermCond(ACtermCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACtermCond(ACtermCond node)
    {
        inACtermCond(node);
        if(node.getCterm() != null)
        {
            node.getCterm().apply(this);
        }
        outACtermCond(node);
    }

    public void inAOrCond(AOrCond node)
    {
        defaultIn(node);
    }

    public void outAOrCond(AOrCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCond(AOrCond node)
    {
        inAOrCond(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getCterm() != null)
        {
            node.getCterm().apply(this);
        }
        outAOrCond(node);
    }

    public void inACfactCterm(ACfactCterm node)
    {
        defaultIn(node);
    }

    public void outACfactCterm(ACfactCterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACfactCterm(ACfactCterm node)
    {
        inACfactCterm(node);
        if(node.getCfact() != null)
        {
            node.getCfact().apply(this);
        }
        outACfactCterm(node);
    }

    public void inAAndCterm(AAndCterm node)
    {
        defaultIn(node);
    }

    public void outAAndCterm(AAndCterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCterm(AAndCterm node)
    {
        inAAndCterm(node);
        if(node.getCterm() != null)
        {
            node.getCterm().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getCfact() != null)
        {
            node.getCfact().apply(this);
        }
        outAAndCterm(node);
    }

    public void inACompCfact(ACompCfact node)
    {
        defaultIn(node);
    }

    public void outACompCfact(ACompCfact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompCfact(ACompCfact node)
    {
        inACompCfact(node);
        if(node.getComp() != null)
        {
            node.getComp().apply(this);
        }
        outACompCfact(node);
    }

    public void inANotCfact(ANotCfact node)
    {
        defaultIn(node);
    }

    public void outANotCfact(ANotCfact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCfact(ANotCfact node)
    {
        inANotCfact(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getCfact() != null)
        {
            node.getCfact().apply(this);
        }
        outANotCfact(node);
    }

    public void inAEqComp(AEqComp node)
    {
        defaultIn(node);
    }

    public void outAEqComp(AEqComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqComp(AEqComp node)
    {
        inAEqComp(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAEqComp(node);
    }

    public void inANeqComp(ANeqComp node)
    {
        defaultIn(node);
    }

    public void outANeqComp(ANeqComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqComp(ANeqComp node)
    {
        inANeqComp(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outANeqComp(node);
    }

    public void inALeqComp(ALeqComp node)
    {
        defaultIn(node);
    }

    public void outALeqComp(ALeqComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeqComp(ALeqComp node)
    {
        inALeqComp(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        if(node.getLeq() != null)
        {
            node.getLeq().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outALeqComp(node);
    }

    public void inAGeqComp(AGeqComp node)
    {
        defaultIn(node);
    }

    public void outAGeqComp(AGeqComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeqComp(AGeqComp node)
    {
        inAGeqComp(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        if(node.getGeq() != null)
        {
            node.getGeq().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAGeqComp(node);
    }

    public void inALtComp(ALtComp node)
    {
        defaultIn(node);
    }

    public void outALtComp(ALtComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtComp(ALtComp node)
    {
        inALtComp(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outALtComp(node);
    }

    public void inAGtComp(AGtComp node)
    {
        defaultIn(node);
    }

    public void outAGtComp(AGtComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtComp(AGtComp node)
    {
        inAGtComp(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAGtComp(node);
    }

    public void inACparenComp(ACparenComp node)
    {
        defaultIn(node);
    }

    public void outACparenComp(ACparenComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACparenComp(ACparenComp node)
    {
        inACparenComp(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outACparenComp(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outABlock(node);
    }

    public void inANoopStmt(ANoopStmt node)
    {
        defaultIn(node);
    }

    public void outANoopStmt(ANoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopStmt(ANoopStmt node)
    {
        inANoopStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoopStmt(node);
    }

    public void inAAssignmentStmt(AAssignmentStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmt(AAssignmentStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmt(AAssignmentStmt node)
    {
        inAAssignmentStmt(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentStmt(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmt(node);
    }

    public void inAFcallStmt(AFcallStmt node)
    {
        defaultIn(node);
    }

    public void outAFcallStmt(AFcallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFcallStmt(AFcallStmt node)
    {
        inAFcallStmt(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFcallStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhileStmt() != null)
        {
            node.getWhileStmt().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseIfStmt(ANoElseIfStmt node)
    {
        inANoElseIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        outANoElseIfStmt(node);
    }

    public void inAElseIfStmt(AElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outAElseIfStmt(AElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIfStmt(AElseIfStmt node)
    {
        inAElseIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAElseIfStmt(node);
    }

    public void inANoopStmtWithElse(ANoopStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outANoopStmtWithElse(ANoopStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopStmtWithElse(ANoopStmtWithElse node)
    {
        inANoopStmtWithElse(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoopStmtWithElse(node);
    }

    public void inAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        inAAssignmentStmtWithElse(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentStmtWithElse(node);
    }

    public void inABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtWithElse(ABlockStmtWithElse node)
    {
        inABlockStmtWithElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmtWithElse(node);
    }

    public void inAFcallStmtWithElse(AFcallStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAFcallStmtWithElse(AFcallStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFcallStmtWithElse(AFcallStmtWithElse node)
    {
        inAFcallStmtWithElse(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFcallStmtWithElse(node);
    }

    public void inAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtWithElse(AIfStmtWithElse node)
    {
        inAIfStmtWithElse(node);
        if(node.getIfElseStmt() != null)
        {
            node.getIfElseStmt().apply(this);
        }
        outAIfStmtWithElse(node);
    }

    public void inAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        inAWhileStmtWithElse(node);
        if(node.getWhileWithElse() != null)
        {
            node.getWhileWithElse().apply(this);
        }
        outAWhileStmtWithElse(node);
    }

    public void inAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        inAReturnStmtWithElse(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnStmtWithElse(node);
    }

    public void inAIfElseStmt(AIfElseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmt(AIfElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmt(AIfElseStmt node)
    {
        inAIfElseStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfElseStmt(node);
    }

    public void inANoElseWhileStmt(ANoElseWhileStmt node)
    {
        defaultIn(node);
    }

    public void outANoElseWhileStmt(ANoElseWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseWhileStmt(ANoElseWhileStmt node)
    {
        inANoElseWhileStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outANoElseWhileStmt(node);
    }

    public void inAWhileElseWhileWithElse(AWhileElseWhileWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileElseWhileWithElse(AWhileElseWhileWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileElseWhileWithElse(AWhileElseWhileWithElse node)
    {
        inAWhileElseWhileWithElse(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmtWithElse() != null)
        {
            node.getStmtWithElse().apply(this);
        }
        outAWhileElseWhileWithElse(node);
    }
}
