Package compiler;


Helpers
  //white space
  vt = 9; //vertical tab
  lf = 10; //line feed
  ht = 11; //horizontal tab
  ff = 12; //form feed
  cr = 13; //carriage return
  sp = ' '; //space
  eol = cr | lf || cr lf; //end of line
  whitespace = (sp | ht | ff | eol)*;

  squote = '''; //single quote
  dquote = '"'; //double quote
  backslash = '\';

  //others
  anything = [0 .. 0xffff];
  not_eol = [anything - [cr + lf]];
  dollar = '$';
  not_dollar = [anything - dollar];
  operands = '+' | '-' | '*' | 'div' | 'mod';

  digit = ['0' .. '9'];
  number = digit+;
  hex = [digit + [['a' .. 'f'] + ['A' .. 'F']]];
  nondigit = [ '_' + [['a' .. 'z'] + ['A' .. 'Z']]];
  letter = [['a' .. 'z'] + ['A' .. 'Z']];
  char = [not_eol - [[squote + dquote] + backslash]];
  esc_seq = '\n' | '\t' | '\r' | '\0' | '\\' | '\' ''' | '\"' | '\x' hex hex;

  separator = ',' |  whitespace;
  type = 'int' | 'char';


Tokens
  //keywords
  and = 'and';
  char = 'char' ;
  div = 'div';
  do = 'do';
  else = 'else';
  fun = 'fun';
  if = 'if';
  int = 'int';
  mod = 'mod';
  not = 'not';
  nothing = 'nothing';
  or = 'or';
  ref = 'ref';
  return = 'return';
  then = 'then';
  var = 'var';
  while = 'while';

  //others
  comment = '$$' not_dollar* '$' (not_dollar+ '$')* '$';
  simple_com = '$' not_eol* eol; //one line comment
  id = letter (digit | nondigit )*; //var or fun names
  number = number;

  single_char = ''' char ''' | ''' esc_seq ''';
  string = '"' (char | esc_seq)+ '"';

  whitespace = whitespace;

  //separators
  l_par = '(';
  r_par = ')';
  l_brack = '[';
  r_brack = ']';
  l_brace = '{';
  r_brace = '}';
  comma = ',';
  semicolon = ';';
  colon = ':';
  assign = '<-';

  //math
  plus = '+';
  minus = '-';
  mult = '*';

  //comparisons
  eq = '=';
  neq = '#';
  leq = '<=';
  geq = '>=';
  lt = '<';
  gt = '>';

Ignored Tokens
  whitespace,
  simple_com,
  comment;
